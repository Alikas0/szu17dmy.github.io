{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002","title":"HOME"},{"location":"#_1","text":"\u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002","title":"\u9996\u9875"},{"location":"about/","text":"\u5173\u4e8e \u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002","title":"ABOUT"},{"location":"about/#_1","text":"\u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002","title":"\u5173\u4e8e"},{"location":"ctf_writeup/cg_ctf/easyweb/","text":"","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/hackergame2018/cat_remote/","text":"\u732b\u54aa\u9065\u63a7\u5668 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002 \u89e3\u6cd5 \u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 # include & lt ; iostream & gt ; # include & lt ; fstream & gt ; # include & lt ; opencv2 / opencv . hpp & gt ; int main () { cv : : Mat map ( 256 , 768 , CV_8UC1 ); std : : ifstream inputFileStream ( \"seq.txt\" ); int row = 50, col = 128 ; map.at&lt ; uchar&gt ; (row, col) = 255 ; std : : string line ; inputFileStream &gt ; &gt ; line ; for (auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for (int ir = -1 ; ir &lt ; 1 ; ++ir) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'L' : col - = 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; default :; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_1","text":"","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_3","text":"\u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 # include & lt ; iostream & gt ; # include & lt ; fstream & gt ; # include & lt ; opencv2 / opencv . hpp & gt ; int main () { cv : : Mat map ( 256 , 768 , CV_8UC1 ); std : : ifstream inputFileStream ( \"seq.txt\" ); int row = 50, col = 128 ; map.at&lt ; uchar&gt ; (row, col) = 255 ; std : : string line ; inputFileStream &gt ; &gt ; line ; for (auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for (int ir = -1 ; ir &lt ; 1 ; ++ir) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'L' : col - = 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = -1 ; ir & lt ; 1 ; ++ ir ) { for (int ic = -1 ; ic &lt ; 1 ; ++ic) { map.at&lt ; uchar&gt ; (row + ir, col + ic) = 255 ; } } break ; default :; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u89e3\u6cd5"},{"location":"szu_oj/cpp/1084/","text":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c. \u8f93\u5165 \u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c \u8f93\u51fa \u6700\u5927\u503c \u6700\u5c0f\u503c \u6837\u4f8b\u8f93\u5165 3 3 1 2 3 4 5 6 7 8 9 \u6837\u4f8b\u8f93\u51fa 9 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1084/#_3","text":"\u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_4","text":"\u6700\u5927\u503c \u6700\u5c0f\u503c","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_5","text":"3 3 1 2 3 4 5 6 7 8 9","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_6","text":"9 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1084/#_8","text":"#include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1245/","text":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002 \u8f93\u5165 \u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 \u8f93\u51fa display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 \u6837\u4f8b\u8f93\u5165 5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free \u6837\u4f8b\u8f93\u51fa \u8d75\u516d(102)-\u674e\u660e(103)-\u9a6c\u5c71(104)-\u5f20\u4e09(106)-\u738b\u4e94(107)-\u94b1\u4f1f(112) 108-109-110-111-113-114-115-116-117-119-120-118-101 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#_1","text":"\u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1245/#_2","text":"\u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_3","text":"display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_4","text":"5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_5","text":"\u8d75\u516d(102)-\u674e\u660e(103)-\u9a6c\u5c71(104)-\u5f20\u4e09(106)-\u738b\u4e94(107)-\u94b1\u4f1f(112) 108-109-110-111-113-114-115-116-117-119-120-118-101","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1245/#_7","text":"#include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"}]}