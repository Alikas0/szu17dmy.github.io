{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u9996\u9875 \u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002","title":"HOME"},{"location":"#_1","text":"\u4f24\u75d5\u7d2f\u7d2f\uff0c\u75db\u82e6\u7126\u8651\u5374\u4e0d\u7518\u5e73\u5eb8\u3002","title":"\u9996\u9875"},{"location":"about/","text":"\u5173\u4e8e \u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002","title":"ABOUT"},{"location":"about/#_1","text":"\u4e00\u4e9b\u5de5\u7a0b\u8bb0\u5f55\u548c\u77e5\u8bc6\u5e93\u3002","title":"\u5173\u4e8e"},{"location":"ctf_writeup/cg_ctf/easyweb/","text":"","title":"\u7b7e\u5230\u9898"},{"location":"ctf_writeup/hackergame2018/cat_remote/","text":"\u732b\u54aa\u9065\u63a7\u5668 \u9898\u76ee SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002 \u89e3\u51b3\u65b9\u6848 \u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { cv :: Mat map ( 256 , 768 , CV_8UC1 ); std :: ifstream inputFileStream ( \"seq.txt\" ); int row = 50 , col = 128 ; map . at < uchar > ( row , col ) = 255 ; std :: string line ; inputFileStream >> line ; for ( auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'L' : col -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; default : ; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_1","text":"","title":"\u732b\u54aa\u9065\u63a7\u5668"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_2","text":"SOURCE: https://hack2018.lug.ustc.edu.cn/#catremote \u63d0\u793a\uff1aflag \u683c\u5f0f\u4e3a flag{......}\uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u5176\u4e2d\u6709\u4e14\u53ea\u6709\u4e24\u4e2a\u4e3a\u5927\u5199\u5b57\u6bcd\u3002 \u4eca\u5929\u7684 App Store \u9996\u9875\u6545\u4e8b\u662f\u300a\u732b\u54aa\u5360\u9886\u4e16\u754c\u300b(\u8be6\u60c5)\u3002 SERIOUSLY? D \u540c\u5b66\u4e0d\u7981\u5f00\u59cb\u5e7b\u60f3\u88ab\u732b\u54aa\u5360\u9886\u7684\u4e16\u754c\uff1a\u96c6\u4e2d\u8425\u91cc\u6210\u7fa4\u7684\u94f2\u5c4e\u5b98\uff0c\u5bc6\u5bc6\u9ebb\u9ebb\u7684 Nepeta cataria\uff08Wikipedia\uff09\u519c\u7530\uff0c\u968f\u610f\u6446\u653e\u7684\u7eb8\u7bb1\u5b50\u5360\u6ee1\u4e86\u9053\u8def\u2026\u2026 \u60f3\u60f3\u5c31\u53ef\u6015\uff0c\u4e0d\u8fc7 D \u540c\u5b66\u77e5\u9053\u4eba\u7c7b\u8fd8\u6709\u7ec8\u6781\u79d8\u5bc6\u6b66\u5668\u53ef\u4ee5\u7528\u2014\u2014\u732b\u54aa\u9065\u63a7\u5668\uff0c\u6709\u4e86\u732b\u54aa\u9065\u63a7\u5668\uff0c\u518d\u591a\u7684\u732b\u54aa\u4e5f\u53ea\u4f1a\u4e56\u4e56\u5730\u542c\u4eba\u7c7b\u7684\u8bdd\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\uff5e \u4e0b\u9762\u662f\u5236\u4f5c\u732b\u54aa\u9065\u63a7\u5668\u7684\u6280\u672f\u603b\u7ed3\uff0c\u9700\u8981\u7684\u539f\u6599\u6709\uff1a 5mW 6mm \u70b9\u72b6\u6fc0\u5149\u4e8c\u6781\u7ba1\u4e00\u4e2a\uff1b \u9502\u7535\u6c60\u4e00\u4e2a\uff1b \u5bfc\u7ebf\u82e5\u5e72\uff1b \u7136\u540e\u7528\u5bfc\u7ebf\u5c06\u9502\u7535\u6c60\u548c\u6fc0\u5149\u4e8c\u6781\u7ba1\u8fde\u63a5\u8d77\u6765\uff08\u8fd9\u4e00\u6b65\u7684\u76ee\u7684\u662f\u8ba9\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\uff0c\u4e0d\u60f3\u4e8c\u6781\u7ba1\u4eae\u8d77\u6765\u7684\u540c\u5b66\u53ef\u4ee5\u4e0d\u8fde\uff09\uff0c\u4e00\u4e2a\u7f8e\u5473\u7684\u732b\u54aa\u9065\u63a7\u5668\u5c31\u505a\u597d\u4e86\u3002 \u732b\u54aa\u9065\u63a7\u5668\u7684\u539f\u7406\u975e\u5e38\u7b80\u5355\uff01\u64b8\u732b\u5b66\u4f1a\u66fe\u7ecf\u6709\u8bba\u6587\u7ed9\u51fa\u8fc7\u7ed3\u8bba\uff1a\u6fc0\u5149\u7b14\u6307\u5411\u54ea\u91cc\uff0c\u732b\u54aa\u5c31\u4f1a\u8dd1\u5230\u54ea\u91cc\u3002 \u4e3a\u4e86\u62a5\u590d\u732b\u54aa\u628a\u81ea\u5df1\u7684\u4ee3\u7801\u6253\u4e71\uff08\u89c1\uff1a\u732b\u54aa\u4e0e\u952e\u76d8\uff09\uff0cD \u540c\u5b66\u628a\u732b\u54aa\u9065\u63a7\u5668\u7ed1\u5728\u53ef\u4ee5\u4e0a\uff08UP\uff09\u4e0b\uff08DOWN\uff09\u5de6\uff08LEFT\uff09\u53f3\uff08RIGHT\uff09\u79fb\u52a8\u7684\u4e09\u8f74\u673a\u68b0\u81c2\u4e0a\uff0c\u5f00\u59cb\u4f7f\u7528\u6811\u8393\u6d3e\uff08\u4e00\u6b3e\u57fa\u4e8e Linux \u7684\u5355\u7247\u673a\u8ba1\u7b97\u673a\uff09\u63a7\u5236\u4e09\u8f74\u673a\u68b0\u81c2\uff0c\u8fdb\u800c\u63a7\u5236\u732b\u54aa\u5728\u8349\u5730\u4e0a\u8dd1\u6765\u8dd1\u53bb\u3002 \u9644\u4ef6\u662f\u6811\u8393\u6d3e\u4e0a\u7559\u4e0b\u7684\u8c03\u8bd5\u8f93\u51fa\u4fe1\u606f\uff0c\u6211\u4eec\u8d76\u5230\u73b0\u573a\u65f6\u53ea\u5269\u4e0b\u8fd9\u4e2a\u4e86\u3002","title":"\u9898\u76ee"},{"location":"ctf_writeup/hackergame2018/cat_remote/#_3","text":"\u6253\u5f00\u6587\u6863\u53d1\u73b0\u4e3a\u56db\u4e2a\u65b9\u5411\u7684\u5b57\u6bcd\uff0c\u731c\u60f3\u753b\u51fa\u8be5\u8def\u7ebf\u5373\u53ef\u83b7\u5f97flag\u3002\u8fd9\u91cc\u4f7f\u7528OpenCV\u8f85\u52a9\u753b\u56fe\uff0c\u4f5c\u56fe\u540e\u5373\u53ef\u53d1\u73b0flag\u3002 #include <iostream> #include <fstream> #include <opencv2/opencv.hpp> int main () { cv :: Mat map ( 256 , 768 , CV_8UC1 ); std :: ifstream inputFileStream ( \"seq.txt\" ); int row = 50 , col = 128 ; map . at < uchar > ( row , col ) = 255 ; std :: string line ; inputFileStream >> line ; for ( auto i : line ) { switch ( i ) { case 'U' : row -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'D' : row += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'L' : col -= 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; case 'R' : col += 1 ; for ( int ir = - 1 ; ir < 1 ; ++ ir ) { for ( int ic = - 1 ; ic < 1 ; ++ ic ) { map . at < uchar > ( row + ir , col + ic ) = 255 ; } } break ; default : ; } cv :: waitKey ( 1 ); cv :: imshow ( \"MAP\" , map ); } cv :: imshow ( \"MAP\" , map ); cv :: waitKey ( 0 ); return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/cpp/1084/","text":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c. \u8f93\u5165 \u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c \u8f93\u51fa \u6700\u5927\u503c \u6700\u5c0f\u503c \u6837\u4f8b\u8f93\u5165 3 3 1 2 3 4 5 6 7 8 9 \u6837\u4f8b\u8f93\u51fa 9 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u6c42\u77e9\u9635\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c"},{"location":"szu_oj/cpp/1084/#_2","text":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u7528\u4e00\u7ea7\u6307\u9488\u63a5\u6536\u4e00\u4e2a\u4efb\u610f\u884c\u4efb\u610f\u5217\u7684\u77e9\u9635\u5e76\u8fd4\u56de\u8be5\u77e9\u9635\u5143\u7d20\u7684\u6700\u5927\u548c\u6700\u5c0f\u503c.","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1084/#_3","text":"\u77e9\u9635\u7684\u884c\u6570 \u77e9\u9635\u7684\u5217\u6570 \u77e9\u9635\u5404\u5143\u7d20\u7684\u503c","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_4","text":"\u6700\u5927\u503c \u6700\u5c0f\u503c","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_5","text":"3 3 1 2 3 4 5 6 7 8 9","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1084/#_6","text":"9 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1084/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1084/#_8","text":"#include <iostream> void findMinAndMaxValues ( int * ptr , int row , int col ); int main () { int row , col ; std :: cin >> row >> col ; int mat [ row ][ col ]; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { std :: cin >> mat [ ir ][ ic ]; } } findMinAndMaxValues ( & mat [ 0 ][ 0 ], row , col ); return 0 ; } void findMinAndMaxValues ( int * ptr , int row , int col ) { int min = * ptr , max = * ptr ; for ( int ir = 0 ; ir < row ; ++ ir ) { for ( int ic = 0 ; ic < col ; ++ ic ) { if ( ptr [ ir * col + ic ] < min ) { min = ptr [ ir * col + ic ]; } if ( ptr [ ir * col + ic ] > max ) { max = ptr [ ir * col + ic ]; } } } std :: cout << max << std :: endl << min << std :: endl ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/cpp/1295/","text":"\u5355\u8bcd\u7edf\u8ba1 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6839\u636e\u5355\u8bcd\u7684\u51fa\u73b0\u9891\u7387\u964d\u5e8f\u6253\u5370\u51fa\u6240\u8f93\u5165\u7684\u7684\u5404\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u524d\u6807\u6709\u5b83\u7684\u8ba1\u6570\u503c\u3002 \u8f93\u5165 \u5404\u4e2a\u5355\u8bcd\uff0c\u8f93\u51650\u5219\u8868\u793a\u5355\u8bcd\u7ed3\u675f \u8f93\u51fa \u964d\u5e8f\u6253\u5370\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u548c\u5355\u8bcd\u3002\u5355\u8bcd\u9891\u5ea6\u76f8\u540c\uff0c\u6309\u51fa\u73b0\u987a\u5e8f\u8f93\u51fa\u3002 \u6837\u4f8b\u8f93\u5165 bad good bad cute how good good 0 \u6837\u4f8b\u8f93\u51fa 3 good 2 bad 1 cute 1 how \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <string> #include <vector> #include <algorithm> struct Pair { std :: string string ; int count ; Pair ( std :: string & string , int count ) : string ( string ), count ( count ) {} }; bool operator == ( Pair & pair , const std :: string & string ) { return pair . string == string ; } bool operator < ( const Pair & lhs , const Pair & rhs ) { return lhs . count > rhs . count ; // NG } int main () { std :: vector < Pair > vector ; std :: string string ; std :: cin >> string ; while ( string != \"0\" ) { std :: vector < Pair >:: iterator it = std :: find ( vector . begin (), vector . end (), string ); if ( it != vector . end ()) { it -> count += 1 ; } else { vector . push_back ( Pair ( string , 1 )); } std :: cin >> string ; } std :: sort ( vector . begin (), vector . end ()); for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ]. count << ' ' << vector [ i ]. string << std :: endl ; } return 0 ; }","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"szu_oj/cpp/1295/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5355\u8bcd\u7edf\u8ba1"},{"location":"szu_oj/cpp/1295/#_2","text":"\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6839\u636e\u5355\u8bcd\u7684\u51fa\u73b0\u9891\u7387\u964d\u5e8f\u6253\u5370\u51fa\u6240\u8f93\u5165\u7684\u7684\u5404\u4e2a\u5355\u8bcd\u3002\u6bcf\u4e2a\u5355\u8bcd\u524d\u6807\u6709\u5b83\u7684\u8ba1\u6570\u503c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1295/#_3","text":"\u5404\u4e2a\u5355\u8bcd\uff0c\u8f93\u51650\u5219\u8868\u793a\u5355\u8bcd\u7ed3\u675f","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1295/#_4","text":"\u964d\u5e8f\u6253\u5370\u5355\u8bcd\u51fa\u73b0\u7684\u9891\u7387\u548c\u5355\u8bcd\u3002\u5355\u8bcd\u9891\u5ea6\u76f8\u540c\uff0c\u6309\u51fa\u73b0\u987a\u5e8f\u8f93\u51fa\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1295/#_5","text":"bad good bad cute how good good 0","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1295/#_6","text":"3 good 2 bad 1 cute 1 how","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1295/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1295/#_8","text":"#include <iostream> #include <string> #include <vector> #include <algorithm> struct Pair { std :: string string ; int count ; Pair ( std :: string & string , int count ) : string ( string ), count ( count ) {} }; bool operator == ( Pair & pair , const std :: string & string ) { return pair . string == string ; } bool operator < ( const Pair & lhs , const Pair & rhs ) { return lhs . count > rhs . count ; // NG } int main () { std :: vector < Pair > vector ; std :: string string ; std :: cin >> string ; while ( string != \"0\" ) { std :: vector < Pair >:: iterator it = std :: find ( vector . begin (), vector . end (), string ); if ( it != vector . end ()) { it -> count += 1 ; } else { vector . push_back ( Pair ( string , 1 )); } std :: cin >> string ; } std :: sort ( vector . begin (), vector . end ()); for ( int i = 0 ; i < vector . size (); ++ i ) { std :: cout << vector [ i ]. count << ' ' << vector [ i ]. string << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/cpp/1341/","text":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8ba1\u7b97\u5b57\u7b26\u4e32S\u7684\u957f\u5ea6\uff0c\u529f\u80fd\u4e0estrlen\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u4e0d\u80fd\u8c03\u7528\u5e93\u51fd\u6570strlen\uff0c\u5426\u5219\u4e0d\u7ed9\u5206\u3002\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c\u3002 \u8f93\u5165 \u8f93\u5165\u6d4b\u8bd5\u7ec4\u6570t \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u5165\u5b57\u7b26\u4e32S\uff08\u957f\u5ea6<=30\uff09 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u51faS\u7684\u957f\u5ea6 \u6837\u4f8b\u8f93\u5165 1 hehe \u6837\u4f8b\u8f93\u51fa 4 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char str [ 64 ] = {}; std :: cin >> str ; int length = 0 ; while ( str [ ++ length ] != '\\0' ); std :: cout << length << std :: endl ; } return 0 ; }","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"szu_oj/cpp/1341/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u8ba1\u7b97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6"},{"location":"szu_oj/cpp/1341/#_2","text":"\u8ba1\u7b97\u5b57\u7b26\u4e32S\u7684\u957f\u5ea6\uff0c\u529f\u80fd\u4e0estrlen\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u4e0d\u80fd\u8c03\u7528\u5e93\u51fd\u6570strlen\uff0c\u5426\u5219\u4e0d\u7ed9\u5206\u3002\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u7a7a\u683c\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/cpp/1341/#_3","text":"\u8f93\u5165\u6d4b\u8bd5\u7ec4\u6570t \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u5165\u5b57\u7b26\u4e32S\uff08\u957f\u5ea6<=30\uff09","title":"\u8f93\u5165"},{"location":"szu_oj/cpp/1341/#_4","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\uff0c\u8f93\u51faS\u7684\u957f\u5ea6","title":"\u8f93\u51fa"},{"location":"szu_oj/cpp/1341/#_5","text":"1 hehe","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/cpp/1341/#_6","text":"4","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/cpp/1341/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/cpp/1341/#_8","text":"#include <iostream> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { char str [ 64 ] = {}; std :: cin >> str ; int length = 0 ; while ( str [ ++ length ] != '\\0' ); std :: cout << length << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1199/","text":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7528C++\u8bed\u8a00\u548c\u7c7b\u5b9e\u73b0\u5355\u94fe\u8868\uff0c\u542b\u5934\u7ed3\u70b9 \u5c5e\u6027\u5305\u62ec\uff1adata\u6570\u636e\u57df\u3001next\u6307\u9488\u57df \u64cd\u4f5c\u5305\u62ec\uff1a\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e \u6ce8\u610f\uff1a\u5355\u94fe\u8868\u4e0d\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u4f4d\u7f6e\u4ece1\u5f00\u59cb\u5bf9\u5e94\u9996\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \u7c7b\u5b9a\u4e49\u53c2\u8003 \u8f93\u5165 \u7b2c1\u884c\u5148\u8f93\u5165n\u8868\u793a\u6709n\u4e2a\u6570\u636e\uff0c\u63a5\u7740\u8f93\u5165n\u4e2a\u6570\u636e \u7b2c2\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c3\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c4\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c5\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c6\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u7b2c7\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u8f93\u51fa \u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c \u7b2c1\u884c\u8f93\u51fa\u521b\u5efa\u540e\u7684\u5355\u94fe\u8868\u7684\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u63d2\u5165\u6216\u5220\u9664\uff09\uff0c\u8f93\u51fa\u6267\u884c\u540e\u7684\u5355\u94fe\u8868\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u67e5\u627e\uff0c\u8f93\u51fa\u67e5\u627e\u5230\u7684\u6570\u636e \u5982\u679c\u6267\u884c\u64cd\u4f5c\u5931\u8d25\uff08\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u5931\u8d25\uff09\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32error\uff0c\u4e0d\u5fc5\u8f93\u51fa\u5355\u94fe\u8868 \u6837\u4f8b\u8f93\u5165 6 11 22 33 44 55 66 3 777 1 888 1 11 0 5 \u6837\u4f8b\u8f93\u51fa 11 22 33 44 55 66 11 22 777 33 44 55 66 888 11 22 777 33 44 55 66 11 22 777 33 44 55 66 error error 44 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> #include <stdexcept> class List { public : List ( std :: vector < int > & vector ) : root_ ( new Node ) { Node * node = root_ ; for ( int i = 0 ; i < vector . size (); ++ i , node = node -> next ) { node -> next = new Node ( vector [ i ]); } } ~ List () { Node * node = root_ , * next ; while ( node != NULL ) { next = node -> next ; delete node ; node = next ; } } int at ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; node = node -> next ; if ( count == index ) { return node -> data ; } } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void insert ( int index , int data ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL || ( count + 1 ) == index ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = new Node ( data , tmp ); return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void erase ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = node -> next -> next ; delete tmp ; return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } int length () { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; count += 1 ; } return count ; } void print () { Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; std :: cout << node -> data << ' ' ; } std :: cout << std :: endl ; } private : struct Node { int data ; Node * next ; Node () : data ( 0 ), next ( NULL ) {} Node ( int data ) : data ( data ) {} Node ( int data , Node * next ) : data ( data ), next ( next ) {} }; Node * root_ ; }; int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } List list ( vector ); list . print (); for ( int i = 0 ; i < 2 ; ++ i ) { int index , number ; std :: cin >> index >> number ; try { list . insert ( index , number ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { list . erase ( index ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { std :: cout << list . at ( index ) << std :: endl ; } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0"},{"location":"szu_oj/ds/1199/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5355\u94fe\u8868--\u7c7b\u5b9e\u73b0"},{"location":"szu_oj/ds/1199/#_1","text":"\u7528C++\u8bed\u8a00\u548c\u7c7b\u5b9e\u73b0\u5355\u94fe\u8868\uff0c\u542b\u5934\u7ed3\u70b9 \u5c5e\u6027\u5305\u62ec\uff1adata\u6570\u636e\u57df\u3001next\u6307\u9488\u57df \u64cd\u4f5c\u5305\u62ec\uff1a\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e \u6ce8\u610f\uff1a\u5355\u94fe\u8868\u4e0d\u662f\u6570\u7ec4\uff0c\u6240\u4ee5\u4f4d\u7f6e\u4ece1\u5f00\u59cb\u5bf9\u5e94\u9996\u7ed3\u70b9\uff0c\u5934\u7ed3\u70b9\u4e0d\u653e\u6570\u636e \u7c7b\u5b9a\u4e49\u53c2\u8003","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1199/#_2","text":"\u7b2c1\u884c\u5148\u8f93\u5165n\u8868\u793a\u6709n\u4e2a\u6570\u636e\uff0c\u63a5\u7740\u8f93\u5165n\u4e2a\u6570\u636e \u7b2c2\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c3\u884c\u8f93\u5165\u8981\u63d2\u5165\u7684\u4f4d\u7f6e\u548c\u65b0\u6570\u636e \u7b2c4\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c5\u884c\u8f93\u5165\u8981\u5220\u9664\u7684\u4f4d\u7f6e \u7b2c6\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e \u7b2c7\u884c\u8f93\u5165\u8981\u67e5\u627e\u7684\u4f4d\u7f6e","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1199/#_3","text":"\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c \u7b2c1\u884c\u8f93\u51fa\u521b\u5efa\u540e\u7684\u5355\u94fe\u8868\u7684\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff08\u63d2\u5165\u6216\u5220\u9664\uff09\uff0c\u8f93\u51fa\u6267\u884c\u540e\u7684\u5355\u94fe\u8868\u6570\u636e \u6bcf\u6210\u529f\u6267\u884c\u4e00\u6b21\u67e5\u627e\uff0c\u8f93\u51fa\u67e5\u627e\u5230\u7684\u6570\u636e \u5982\u679c\u6267\u884c\u64cd\u4f5c\u5931\u8d25\uff08\u5305\u62ec\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u5931\u8d25\uff09\uff0c\u8f93\u51fa\u5b57\u7b26\u4e32error\uff0c\u4e0d\u5fc5\u8f93\u51fa\u5355\u94fe\u8868","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1199/#_4","text":"6 11 22 33 44 55 66 3 777 1 888 1 11 0 5","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1199/#_5","text":"11 22 33 44 55 66 11 22 777 33 44 55 66 888 11 22 777 33 44 55 66 11 22 777 33 44 55 66 error error 44","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1199/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1199/#_7","text":"#include <iostream> #include <vector> #include <stdexcept> class List { public : List ( std :: vector < int > & vector ) : root_ ( new Node ) { Node * node = root_ ; for ( int i = 0 ; i < vector . size (); ++ i , node = node -> next ) { node -> next = new Node ( vector [ i ]); } } ~ List () { Node * node = root_ , * next ; while ( node != NULL ) { next = node -> next ; delete node ; node = next ; } } int at ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; node = node -> next ; if ( count == index ) { return node -> data ; } } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void insert ( int index , int data ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL || ( count + 1 ) == index ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = new Node ( data , tmp ); return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } void erase ( int index ) { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { count += 1 ; if ( count == index ) { Node * tmp = node -> next ; node -> next = node -> next -> next ; delete tmp ; return ; } node = node -> next ; } throw std :: out_of_range ( \"UPPER_LIMIT\" ); } int length () { int count = 0 ; Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; count += 1 ; } return count ; } void print () { Node * node = root_ ; while ( node -> next != NULL ) { node = node -> next ; std :: cout << node -> data << ' ' ; } std :: cout << std :: endl ; } private : struct Node { int data ; Node * next ; Node () : data ( 0 ), next ( NULL ) {} Node ( int data ) : data ( data ) {} Node ( int data , Node * next ) : data ( data ), next ( next ) {} }; Node * root_ ; }; int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } List list ( vector ); list . print (); for ( int i = 0 ; i < 2 ; ++ i ) { int index , number ; std :: cin >> index >> number ; try { list . insert ( index , number ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { list . erase ( index ); list . print (); } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } for ( int i = 0 ; i < 2 ; ++ i ) { int index ; std :: cin >> index ; try { std :: cout << list . at ( index ) << std :: endl ; } catch ( std :: out_of_range & out_of_range ) { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1205/","text":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5904\u7406\u8868\u8fbe\u5f0f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u62ec\u53f7\u5339\u914d\u8fdb\u884c\u68c0\u9a8c\uff0c\u62ec\u53f7\u5339\u914d\u5305\u62ec\u4e09\u79cd\uff1a\u201c(\u201d\u548c\u201c)\u201d\uff0c\u201c[\u201d\u548c\u201c]\u201d\uff0c\u201c{\u201d\u548c\u201c}\u201d\u3002\u4f8b\u5982\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u62ec\u53f7\u5982\u4e0b\uff1a ( ) [ ( ) ( [ ] ) ] { } 1 2 3 4 5 6 7 8 9 10 11 12 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u770b\u51fa\u7b2c1\u548c\u7b2c2\u4e2a\u62ec\u53f7\u5339\u914d\uff0c\u7b2c3\u548c\u7b2c10\u4e2a\u62ec\u53f7\u5339\u914d\uff0c4\u548c5\u5339\u914d\uff0c6\u548c9\u5339\u914d\uff0c7\u548c8\u5339\u914d\uff0c11\u548c12\u5339\u914d\u3002\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u62ec\u53f7\u5d4c\u5957\u7684\u7684\u60c5\u51b5\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f7f\u7528\u5806\u6808\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u79cd\u62ec\u53f7\u5339\u914d\u68c0\u9a8c\uff0c\u53ef\u4ee5\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a 1\u3001 \u5f53\u63a5\u6536\u7b2c1\u4e2a\u5de6\u62ec\u53f7\uff0c\u8868\u793a\u65b0\u7684\u4e00\u7ec4\u5339\u914d\u68c0\u67e5\u5f00\u59cb\uff1b\u968f\u540e\u5982\u679c\u8fde\u7eed\u63a5\u6536\u5230\u5de6\u62ec\u53f7\uff0c\u5219\u4e0d\u65ad\u8fdb\u5806\u6808\u3002 2\u3001 \u5f53\u63a5\u53d7\u7b2c1\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219\u548c\u6700\u65b0\u8fdb\u6808\u7684\u5de6\u62ec\u53f7\u8fdb\u884c\u5339\u914d\uff0c\u8868\u793a\u5d4c\u5957\u4e2d1\u7ec4\u62ec\u53f7\u5df2\u7ecf\u5339\u914d\u6d88\u9664 3\u3001 \u82e5\u5230\u6700\u540e\uff0c\u62ec\u53f7\u4e0d\u80fd\u5b8c\u5168\u5339\u914d\uff0c\u5219\u8bf4\u660e\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6709\u9519 \u5efa\u8bae\u4f7f\u7528C++\u81ea\u5e26\u7684stack\u5bf9\u8c61\u6765\u5b9e\u73b0 stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2at\uff0c\u8868\u793a\u4e0b\u9762\u5c06\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u7684t\u884c\u7684\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u53ea\u8003\u8651\u82f1\u6587\u534a\u89d2\u72b6\u6001\u8f93\u5165\uff0c\u65e0\u9700\u8003\u8651\u4e2d\u6587\u5168\u89d2\u8f93\u5165 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5219\u8f93\u5165ok\uff0c\u4e0d\u5339\u914d\u5219\u8f93\u51faerror \u6837\u4f8b\u8f93\u5165 2 (a+b)[4*5+(-6)] [5*8]/{(a+b)-6 \u6837\u4f8b\u8f93\u51fa ok error \u63d0\u793a \u7b97\u6cd5\u6d41\u7a0b 1\u3001\u521d\u59cb\u5316\uff0ci=0\uff0c\u5efa\u7acb\u5806\u6808\uff0c\u6808\u4e3a\u7a7a 2\u3001\u8f93\u5165\u8868\u8fbe\u5f0f\uff0c\u5efa\u7acb\u6307\u9488\u6307\u5411\u8868\u8fbe\u5f0f\u7684\u5934\u90e8 3\u3001\u8bfb\u5165\u8868\u8fbe\u5f0f\u7684\u7b2ci\u4e2a\u5b57\u7b26 4\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5165\u6808 5\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u68c0\u67e5\u6808\u9876\u5143\u7d20\u662f\u5426\u5339\u914d \u2002A.\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 \u2002B.\u5982\u679c\u4e0d\u5339\u914d\uff0c\u62a5\u9519\u9000\u51fa 6\u3001i++\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5426\u5df2\u7ecf\u8868\u8fbe\u5f0f\u672b\u5c3e \u2002A. \u672a\u5230\u672b\u5c3e\uff0c\u91cd\u590d\u6b65\u9aa43 \u2002B. \u5df2\u5230\u8fbe\u672b\u5c3e \u2003a. \u5806\u6808\u4e3a\u7a7a\uff0c\u8f93\u51faok \u2003b. \u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8f93\u51faerror \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <stack> bool isBracketsMatch ( const std :: string & expression ) { std :: stack < char > stack ; for ( size_t i = 0 ; i < expression . length (); ++ i ) { switch ( expression [ i ]) { case '(' : case '[' : case '{' : stack . push ( expression [ i ]); break ; case ')' : if (( ! stack . empty ()) && stack . top () == '(' ) { stack . pop (); } else { return false ; } break ; case ']' : if (( ! stack . empty ()) && stack . top () == '[' ) { stack . pop (); } else { return false ; } break ; case '}' : if (( ! stack . empty ()) && stack . top () == '{' ) { stack . pop (); } else { return false ; } break ; default : ; } } return stack . empty (); } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string expression ; std :: cin >> expression ; if ( isBracketsMatch ( expression )) { std :: cout << \"ok\" << std :: endl ; } else { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d"},{"location":"szu_oj/ds/1205/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5806\u6808--\u62ec\u53f7\u5339\u914d"},{"location":"szu_oj/ds/1205/#_1","text":"\u5904\u7406\u8868\u8fbe\u5f0f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5bf9\u62ec\u53f7\u5339\u914d\u8fdb\u884c\u68c0\u9a8c\uff0c\u62ec\u53f7\u5339\u914d\u5305\u62ec\u4e09\u79cd\uff1a\u201c(\u201d\u548c\u201c)\u201d\uff0c\u201c[\u201d\u548c\u201c]\u201d\uff0c\u201c{\u201d\u548c\u201c}\u201d\u3002\u4f8b\u5982\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\u62ec\u53f7\u5982\u4e0b\uff1a ( ) [ ( ) ( [ ] ) ] { } 1 2 3 4 5 6 7 8 9 10 11 12 \u4ece\u4e0a\u4f8b\u53ef\u4ee5\u770b\u51fa\u7b2c1\u548c\u7b2c2\u4e2a\u62ec\u53f7\u5339\u914d\uff0c\u7b2c3\u548c\u7b2c10\u4e2a\u62ec\u53f7\u5339\u914d\uff0c4\u548c5\u5339\u914d\uff0c6\u548c9\u5339\u914d\uff0c7\u548c8\u5339\u914d\uff0c11\u548c12\u5339\u914d\u3002\u4ece\u4e2d\u53ef\u4ee5\u770b\u5230\u62ec\u53f7\u5d4c\u5957\u7684\u7684\u60c5\u51b5\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u4f7f\u7528\u5806\u6808\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5904\u7406\u8fd9\u79cd\u62ec\u53f7\u5339\u914d\u68c0\u9a8c\uff0c\u53ef\u4ee5\u9075\u5faa\u4ee5\u4e0b\u89c4\u5219\uff1a 1\u3001 \u5f53\u63a5\u6536\u7b2c1\u4e2a\u5de6\u62ec\u53f7\uff0c\u8868\u793a\u65b0\u7684\u4e00\u7ec4\u5339\u914d\u68c0\u67e5\u5f00\u59cb\uff1b\u968f\u540e\u5982\u679c\u8fde\u7eed\u63a5\u6536\u5230\u5de6\u62ec\u53f7\uff0c\u5219\u4e0d\u65ad\u8fdb\u5806\u6808\u3002 2\u3001 \u5f53\u63a5\u53d7\u7b2c1\u4e2a\u53f3\u62ec\u53f7\uff0c\u5219\u548c\u6700\u65b0\u8fdb\u6808\u7684\u5de6\u62ec\u53f7\u8fdb\u884c\u5339\u914d\uff0c\u8868\u793a\u5d4c\u5957\u4e2d1\u7ec4\u62ec\u53f7\u5df2\u7ecf\u5339\u914d\u6d88\u9664 3\u3001 \u82e5\u5230\u6700\u540e\uff0c\u62ec\u53f7\u4e0d\u80fd\u5b8c\u5168\u5339\u914d\uff0c\u5219\u8bf4\u660e\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u6709\u9519 \u5efa\u8bae\u4f7f\u7528C++\u81ea\u5e26\u7684stack\u5bf9\u8c61\u6765\u5b9e\u73b0 stack\u7c7b\u4f7f\u7528\u7684\u53c2\u8003\u4ee3\u7801 \u5305\u542b\u5934\u6587\u4ef6<stack> \uff1a #include <stack> \u521b\u5efa\u4e00\u4e2a\u5806\u6808\u5bf9\u8c61s\uff08\u6ce8\u610fstack\u662f\u6a21\u677f\u7c7b\uff09\uff1astack <char> s; //\u5806\u6808\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\u578b \u628a\u4e00\u4e2a\u5b57\u7b26ct\u538b\u5165\u5806\u6808\uff1a s.push(ct); \u628a\u6808\u9876\u5143\u7d20\u5f39\u51fa\uff1as.pop(); \u83b7\u53d6\u6808\u9876\u5143\u7d20\uff0c\u653e\u5165\u53d8\u91cfc2\uff1a c2 = s.top(); \u5224\u65ad\u5806\u6808\u662f\u5426\u7a7a\uff1a s.empty()\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u51fd\u6570\u8fd4\u56detrue\uff0c\u5982\u679c\u4e0d\u7a7a\u5219\u8fd4\u56defalse","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1205/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2at\uff0c\u8868\u793a\u4e0b\u9762\u5c06\u6709t\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u7684t\u884c\u7684\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u53ea\u8003\u8651\u82f1\u6587\u534a\u89d2\u72b6\u6001\u8f93\u5165\uff0c\u65e0\u9700\u8003\u8651\u4e2d\u6587\u5168\u89d2\u8f93\u5165","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1205/#_3","text":"\u5bf9\u4e8e\u6bcf\u4e00\u884c\u7684\u8868\u8fbe\u5f0f\uff0c\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\uff0c\u5339\u914d\u5219\u8f93\u5165ok\uff0c\u4e0d\u5339\u914d\u5219\u8f93\u51faerror","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1205/#_4","text":"2 (a+b)[4*5+(-6)] [5*8]/{(a+b)-6","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1205/#_5","text":"ok error","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1205/#_6","text":"\u7b97\u6cd5\u6d41\u7a0b 1\u3001\u521d\u59cb\u5316\uff0ci=0\uff0c\u5efa\u7acb\u5806\u6808\uff0c\u6808\u4e3a\u7a7a 2\u3001\u8f93\u5165\u8868\u8fbe\u5f0f\uff0c\u5efa\u7acb\u6307\u9488\u6307\u5411\u8868\u8fbe\u5f0f\u7684\u5934\u90e8 3\u3001\u8bfb\u5165\u8868\u8fbe\u5f0f\u7684\u7b2ci\u4e2a\u5b57\u7b26 4\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5165\u6808 5\u3001\u5982\u679c\u7b2ci\u4e2a\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u68c0\u67e5\u6808\u9876\u5143\u7d20\u662f\u5426\u5339\u914d \u2002A.\u5982\u679c\u5339\u914d\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20 \u2002B.\u5982\u679c\u4e0d\u5339\u914d\uff0c\u62a5\u9519\u9000\u51fa 6\u3001i++\uff0c\u6307\u5411\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u662f\u5426\u5df2\u7ecf\u8868\u8fbe\u5f0f\u672b\u5c3e \u2002A. \u672a\u5230\u672b\u5c3e\uff0c\u91cd\u590d\u6b65\u9aa43 \u2002B. \u5df2\u5230\u8fbe\u672b\u5c3e \u2003a. \u5806\u6808\u4e3a\u7a7a\uff0c\u8f93\u51faok \u2003b. \u5806\u6808\u4e0d\u4e3a\u7a7a\uff0c\u8f93\u51faerror","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1205/#_7","text":"#include <iostream> #include <stack> bool isBracketsMatch ( const std :: string & expression ) { std :: stack < char > stack ; for ( size_t i = 0 ; i < expression . length (); ++ i ) { switch ( expression [ i ]) { case '(' : case '[' : case '{' : stack . push ( expression [ i ]); break ; case ')' : if (( ! stack . empty ()) && stack . top () == '(' ) { stack . pop (); } else { return false ; } break ; case ']' : if (( ! stack . empty ()) && stack . top () == '[' ) { stack . pop (); } else { return false ; } break ; case '}' : if (( ! stack . empty ()) && stack . top () == '{' ) { stack . pop (); } else { return false ; } break ; default : ; } } return stack . empty (); } int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { std :: string expression ; std :: cin >> expression ; if ( isBracketsMatch ( expression )) { std :: cout << \"ok\" << std :: endl ; } else { std :: cout << \"error\" << std :: endl ; } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1217/","text":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u4e8c\u53c9\u6811\u53ef\u4ee5\u91c7\u7528\u6570\u7ec4\u7684\u65b9\u6cd5\u8fdb\u884c\u5b58\u50a8\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u4f9d\u6b21\u81ea\u4e0a\u800c\u4e0b,\u81ea\u5de6\u81f3\u53f3\u5b58\u50a8\u5230\u4e8c\u53c9\u6811\u7ed3\u70b9\u4e2d\uff0c\u4e00\u822c\u4e8c\u53c9\u6811\u4e0e\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u7f3a\u5c11\u7684\u7ed3\u70b9\u5c31\u5728\u6570\u7ec4\u4e2d\u75280\u6765\u8868\u793a\u3002\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u53f3\u8fb9\u7684\u662f\u4e00\u9897\u666e\u901a\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u5b83\u4e0e\u5de6\u8fb9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u53d1\u73b0\u5b83\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u5c11\u4e86\u7b2c5\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u75280\u8868\u793a\uff0c\u540c\u6837\u5b83\u8fd8\u5c11\u4e86\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7684\u7b2c10\u300111\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u4e5f\u75280\u8868\u793a\u3002 \u7ed3\u70b9\u5b58\u50a8\u7684\u6570\u636e\u5747\u4e3a\u975e\u8d1f\u6574\u6570 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\uff0c\u518d\u8f93\u5165\u6570\u7ec4\u5185\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8f93\u5165\u7684\u6570\u636e\u90fd\u662f\u975e\u8d1f\u6574\u6570 \u8fde\u7eed\u8f93\u5165t\u884c \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u793a\u4f8b\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u6837\u4f8b\u8f93\u5165 3 3 1 2 3 5 1 2 3 0 4 13 1 2 3 4 0 5 6 7 8 0 0 9 10 \u6837\u4f8b\u8f93\u51fa 1 2 3 1 2 4 3 1 2 4 7 8 3 5 9 10 6 \u63d0\u793a \u6ce8\u610f\u4ece\u6570\u7ec4\u4f4d\u7f6e\u548c\u4e8c\u53c9\u6811\u6df1\u5ea6\u3001\u7ed3\u70b9\u4f4d\u7f6e\u8fdb\u884c\u5173\u8054\uff0c\u6216\u8005\u7236\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5b58\u5728\u67d0\u79cd\u7ba1\u7406\uff0c\u4f8b\u5982i, i+1, i/2, i+1/2........\u6216\u80052i, 2i+1.......\u4ed4\u7ec6\u89c2\u5bdf\u54e6 \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> class BiTree { public : explicit BiTree ( size_t size ) : arr_ ( size , 0 ) {} void setFromCin () { for ( int i = 0 ; i < arr_ . size (); ++ i ) { std :: cin >> arr_ [ i ]; } } void preOrderTraverse () { preOrderTraverse ( 0 ); std :: cout << std :: endl ; } private : std :: vector < int > arr_ ; void preOrderTraverse ( int index ) { if ( index < arr_ . size () && arr_ [ index ] != 0 ) { std :: cout << arr_ [ index ] << ' ' ; preOrderTraverse ( 2 * index + 1 ); preOrderTraverse ( 2 * index + 2 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class BiTree biTree ( size ); biTree . setFromCin (); biTree . preOrderTraverse (); } return 0 ; }","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8"},{"location":"szu_oj/ds/1217/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u4e8c\u53c9\u6811\u2014\u2014\u4e8c\u53c9\u6811\u4e4b\u6570\u7ec4\u5b58\u50a8"},{"location":"szu_oj/ds/1217/#_1","text":"\u4e8c\u53c9\u6811\u53ef\u4ee5\u91c7\u7528\u6570\u7ec4\u7684\u65b9\u6cd5\u8fdb\u884c\u5b58\u50a8\uff0c\u628a\u6570\u7ec4\u4e2d\u7684\u6570\u636e\u4f9d\u6b21\u81ea\u4e0a\u800c\u4e0b,\u81ea\u5de6\u81f3\u53f3\u5b58\u50a8\u5230\u4e8c\u53c9\u6811\u7ed3\u70b9\u4e2d\uff0c\u4e00\u822c\u4e8c\u53c9\u6811\u4e0e\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u7f3a\u5c11\u7684\u7ed3\u70b9\u5c31\u5728\u6570\u7ec4\u4e2d\u75280\u6765\u8868\u793a\u3002\uff0c\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u4e0a\u56fe\u53ef\u4ee5\u770b\u51fa\uff0c\u53f3\u8fb9\u7684\u662f\u4e00\u9897\u666e\u901a\u7684\u4e8c\u53c9\u6811\uff0c\u5f53\u5b83\u4e0e\u5de6\u8fb9\u7684\u5b8c\u5168\u4e8c\u53c9\u6811\u5bf9\u6bd4\uff0c\u53d1\u73b0\u5b83\u6bd4\u5b8c\u5168\u4e8c\u53c9\u6811\u5c11\u4e86\u7b2c5\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u75280\u8868\u793a\uff0c\u540c\u6837\u5b83\u8fd8\u5c11\u4e86\u5b8c\u5168\u4e8c\u53c9\u6811\u4e2d\u7684\u7b2c10\u300111\u53f7\u7ed3\u70b9\uff0c\u6240\u4ee5\u5728\u6570\u7ec4\u4e2d\u4e5f\u75280\u8868\u793a\u3002 \u7ed3\u70b9\u5b58\u50a8\u7684\u6570\u636e\u5747\u4e3a\u975e\u8d1f\u6574\u6570","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1217/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570t\uff0c\u8868\u793a\u6709t\u4e2a\u4e8c\u53c9\u6811 \u7b2c\u4e8c\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u5148\u8f93\u5165\u6570\u7ec4\u957f\u5ea6\uff0c\u518d\u8f93\u5165\u6570\u7ec4\u5185\u6570\u636e\uff0c\u6bcf\u4e2a\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8f93\u5165\u7684\u6570\u636e\u90fd\u662f\u975e\u8d1f\u6574\u6570 \u8fde\u7eed\u8f93\u5165t\u884c","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1217/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u793a\u4f8b\u7684\u5148\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1217/#_4","text":"3 3 1 2 3 5 1 2 3 0 4 13 1 2 3 4 0 5 6 7 8 0 0 9 10","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1217/#_5","text":"1 2 3 1 2 4 3 1 2 4 7 8 3 5 9 10 6","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1217/#_6","text":"\u6ce8\u610f\u4ece\u6570\u7ec4\u4f4d\u7f6e\u548c\u4e8c\u53c9\u6811\u6df1\u5ea6\u3001\u7ed3\u70b9\u4f4d\u7f6e\u8fdb\u884c\u5173\u8054\uff0c\u6216\u8005\u7236\u5b50\u7ed3\u70b9\u5728\u6570\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u5b58\u5728\u67d0\u79cd\u7ba1\u7406\uff0c\u4f8b\u5982i, i+1, i/2, i+1/2........\u6216\u80052i, 2i+1.......\u4ed4\u7ec6\u89c2\u5bdf\u54e6","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1217/#_7","text":"#include <iostream> #include <vector> class BiTree { public : explicit BiTree ( size_t size ) : arr_ ( size , 0 ) {} void setFromCin () { for ( int i = 0 ; i < arr_ . size (); ++ i ) { std :: cin >> arr_ [ i ]; } } void preOrderTraverse () { preOrderTraverse ( 0 ); std :: cout << std :: endl ; } private : std :: vector < int > arr_ ; void preOrderTraverse ( int index ) { if ( index < arr_ . size () && arr_ [ index ] != 0 ) { std :: cout << arr_ [ index ] << ' ' ; preOrderTraverse ( 2 * index + 1 ); preOrderTraverse ( 2 * index + 2 ); } } }; int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class BiTree biTree ( size ); biTree . setFromCin (); biTree . preOrderTraverse (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1239/","text":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5934\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u529f\u80fd \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570 \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 6 11 23 39 48 75 62 6 39 52 52 63 63 52 \u6837\u4f8b\u8f93\u51fa 6 1 error 8 1 error 8 1 8 2 \u63d0\u793a \u6ce8\u610f\uff0c\u5f53\u4e24\u6b21\u8f93\u5165\u8981\u76f8\u540c\u7684\u67e5\u627e\u6570\u636e\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u67e5\u627e\u4e0d\u6210\u529f\u5c31\u4f1a\u6267\u884c\u63d2\u5165\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u67e5\u627e\u5fc5\u7136\u6210\u529f\uff0c\u4e14\u67e5\u627e\u6b21\u6570\u4e3a1\u6b21\uff08\u56e0\u4e3a\u505a\u8868\u5934\u63d2\u5165\uff09 \u4f8b\u5982\u793a\u4f8b\u6570\u636e\u4e2d\u8f93\u5165\u4e24\u6b2152\uff0c\u7b2c\u4e00\u6b21\u67e5\u627e\u5931\u8d25\u5c31\u628a52\u63d2\u5165\u5230\u4f4d\u7f6e8\uff0c\u7b2c\u4e8c\u6b21\u67e5\u627e\u5c31\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u8f93\u51faerror\uff0c\u7b2c\u4e8c\u6b21\u5c31\u8f93\u51fa8 1 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u6b21\u8f93\u516552\u4f1a\u8f93\u51fa8 2 63\u63d2\u5165\u4e8e52\u524d \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * node = new Node (); node -> data = data ; node -> next = hash_ [ index ]. next ; hash_ [ index ]. next = node ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5"},{"location":"szu_oj/ds/1239/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e--\u94fe\u5730\u5740\u6cd5"},{"location":"szu_oj/ds/1239/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5934\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u529f\u80fd","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1239/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1239/#_3","text":"\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1239/#_4","text":"6 11 23 39 48 75 62 6 39 52 52 63 63 52","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1239/#_5","text":"6 1 error 8 1 error 8 1 8 2","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1239/#_6","text":"\u6ce8\u610f\uff0c\u5f53\u4e24\u6b21\u8f93\u5165\u8981\u76f8\u540c\u7684\u67e5\u627e\u6570\u636e\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u67e5\u627e\u4e0d\u6210\u529f\u5c31\u4f1a\u6267\u884c\u63d2\u5165\uff0c\u90a3\u4e48\u7b2c\u4e8c\u6b21\u67e5\u627e\u5fc5\u7136\u6210\u529f\uff0c\u4e14\u67e5\u627e\u6b21\u6570\u4e3a1\u6b21\uff08\u56e0\u4e3a\u505a\u8868\u5934\u63d2\u5165\uff09 \u4f8b\u5982\u793a\u4f8b\u6570\u636e\u4e2d\u8f93\u5165\u4e24\u6b2152\uff0c\u7b2c\u4e00\u6b21\u67e5\u627e\u5931\u8d25\u5c31\u628a52\u63d2\u5165\u5230\u4f4d\u7f6e8\uff0c\u7b2c\u4e8c\u6b21\u67e5\u627e\u5c31\u6210\u529f\u4e86\uff0c\u6240\u4ee5\u7b2c\u4e00\u6b21\u8f93\u51faerror\uff0c\u7b2c\u4e8c\u6b21\u5c31\u8f93\u51fa8 1 \u4e3a\u4ec0\u4e48\u7b2c\u4e09\u6b21\u8f93\u516552\u4f1a\u8f93\u51fa8 2 63\u63d2\u5165\u4e8e52\u524d","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1239/#_7","text":"#include <iostream> #include <vector> struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * node = new Node (); node -> data = data ; node -> next = hash_ [ index ]. next ; hash_ [ index ]. next = node ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1241/","text":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u793a\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u793a\u4f8b\u6709n\u4e2a\u6570\u636e \u7b2c\u4e09\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8 \u8f93\u51fa \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6bcf\u8d9f\u5feb\u6392\u7684\u7ed3\u679c\uff0c\u5373\u6bcf\u6b21\u6392\u597d\u4e00\u4e2a\u6570\u5b57\u7ed3\u679c\uff08\u957f\u5ea6\u4e3a1\u7684\u5b50\u5e8f\u5217\uff0c\u4e0d\u7528\u6392\uff0c\u4e0d\u7528\u8f93\u51fa\uff09\u3002\u4e0d\u540c\u6d4b\u8bd5\u6570\u636e\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002 \u6837\u4f8b\u8f93\u5165 2 6 111 22 6 444 333 55 8 77 555 33 1 444 77 666 2222 \u6837\u4f8b\u8f93\u51fa 55 22 6 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 1 33 77 555 444 77 666 2222 1 33 77 555 444 77 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> void quickSort ( std :: vector < int > & vector , int begin , int end ); int partition ( std :: vector < int > & vector , int begin , int end ); int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } quickSort ( vector , 0 , static_cast < int > ( vector . size () - 1 )); std :: cout << std :: endl ; } return 0 ; } void quickSort ( std :: vector < int > & vector , int begin , int end ) { if ( begin < end ) { int pivot = partition ( vector , begin , end ); std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; quickSort ( vector , begin , pivot - 1 ); quickSort ( vector , pivot + 1 , end ); } } int partition ( std :: vector < int > & vector , int begin , int end ) { int key = vector [ begin ]; while ( begin < end ) { while ( begin < end && vector [ end ] >= key ) { end -= 1 ; } std :: swap ( vector [ begin ], vector [ end ]); while ( begin < end && vector [ begin ] <= key ) { begin += 1 ; } std :: swap ( vector [ begin ], vector [ end ]); } return begin ; }","title":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f"},{"location":"szu_oj/ds/1241/#ds-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u6392\u5e8f--\u5feb\u901f\u6392\u5e8f"},{"location":"szu_oj/ds/1241/#_1","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u4f7f\u7528\u5feb\u901f\u6392\u5e8f\u7b97\u6cd5\u8fdb\u884c\u4ece\u5c0f\u5230\u5927\u7684\u6392\u5e8f --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1241/#_2","text":"\u7b2c\u4e00\u884c\u8f93\u5165t\uff0c\u8868\u793a\u6709t\u4e2a\u6d4b\u8bd5\u793a\u4f8b \u7b2c\u4e8c\u884c\u8f93\u5165n\uff0c\u8868\u793a\u7b2c\u4e00\u4e2a\u793a\u4f8b\u6709n\u4e2a\u6570\u636e \u7b2c\u4e09\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u4ee5\u6b64\u7c7b\u63a8","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1241/#_3","text":"\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u6bcf\u8d9f\u5feb\u6392\u7684\u7ed3\u679c\uff0c\u5373\u6bcf\u6b21\u6392\u597d\u4e00\u4e2a\u6570\u5b57\u7ed3\u679c\uff08\u957f\u5ea6\u4e3a1\u7684\u5b50\u5e8f\u5217\uff0c\u4e0d\u7528\u6392\uff0c\u4e0d\u7528\u8f93\u51fa\uff09\u3002\u4e0d\u540c\u6d4b\u8bd5\u6570\u636e\u95f4\u7528\u7a7a\u884c\u5206\u9694\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1241/#_4","text":"2 6 111 22 6 444 333 55 8 77 555 33 1 444 77 666 2222","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1241/#_5","text":"55 22 6 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 6 22 55 111 333 444 1 33 77 555 444 77 666 2222 1 33 77 555 444 77 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222 1 33 77 77 444 555 666 2222","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1241/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1241/#_7","text":"#include <iostream> #include <vector> void quickSort ( std :: vector < int > & vector , int begin , int end ); int partition ( std :: vector < int > & vector , int begin , int end ); int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } quickSort ( vector , 0 , static_cast < int > ( vector . size () - 1 )); std :: cout << std :: endl ; } return 0 ; } void quickSort ( std :: vector < int > & vector , int begin , int end ) { if ( begin < end ) { int pivot = partition ( vector , begin , end ); std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; quickSort ( vector , begin , pivot - 1 ); quickSort ( vector , pivot + 1 , end ); } } int partition ( std :: vector < int > & vector , int begin , int end ) { int key = vector [ begin ]; while ( begin < end ) { while ( begin < end && vector [ end ] >= key ) { end -= 1 ; } std :: swap ( vector [ begin ], vector [ end ]); while ( begin < end && vector [ begin ] <= key ) { begin += 1 ; } std :: swap ( vector [ begin ], vector [ end ]); } return begin ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1245/","text":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002 \u8f93\u5165 \u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 \u8f93\u51fa display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 \u6837\u4f8b\u8f93\u5165 5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free \u6837\u4f8b\u8f93\u51fa \u8d75\u516d(102)-\u674e\u660e(103)-\u9a6c\u5c71(104)-\u5f20\u4e09(106)-\u738b\u4e94(107)-\u94b1\u4f1f(112) 108-109-110-111-113-114-115-116-117-119-120-118-101 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u94fe\u8868\u2014\u5b66\u751f\u5bbf\u820d\u7ba1\u7406"},{"location":"szu_oj/ds/1245/#_1","text":"\u5047\u8bbe\u67d0\u6821\u670920\u95f4\u5bbf\u820d\uff0c\u5bbf\u820d\u7f16\u53f7101\uff0c102\uff0c...,120\u3002\u6bcf\u95f4\u53ea\u4f4f\u4e00\u540d\u5b66\u751f\u3002\u521d\u59cb\u90e8\u5206\u5bbf\u820d\u5df2\u7528\u3002\u7528\u4e24\u4e2a\u94fe\u8868\uff08\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u548c\u53ef\u7528\u5bbf\u820d\u94fe\u8868\uff09\u7ef4\u62a4\u5bbf\u820d\u7684\u7ba1\u7406\uff0c\u5b9e\u73b0\u5bbf\u820d\u5206\u914d\u3001\u5bbf\u820d\u4ea4\u56de\u3002 \u7ea6\u5b9a\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002\u521d\u59cb\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e5f\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u94fe\u63a5\u3002 \u5bbf\u820d\u5206\u914d\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u6458\u53d6\u7b2c\u4e00\u95f4\u5bbf\u820d\u5206\u914d\u7ed9\u5b66\u751f\u3002\u5b66\u751f\u4ea4\u56de\u7684\u5bbf\u820d\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u6700\u540e\u3002 \u5907\u6ce8\uff1a\u4f7f\u7528list\u5bb9\u5668\u6216\u9759\u6001\u94fe\u8868\u3002\u4e0d\u7528\u8003\u8651\u5bbf\u820d\u5206\u914d\u548c\u4ea4\u56de\u4e0d\u6210\u529f\u7684\u60c5\u51b5\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1245/#_2","text":"\u521d\u59cb\u5bbf\u820d\u72b6\u6001\uff0c\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u5df2\u7528\u5bbf\u820dn\u95f4 \u540e\u8ddfn\u884c\u6570\u636e\uff0c\u6bcf\u884c\u683c\u5f0f\u4e3a\uff1a\u5bbf\u820d\u53f7 \u5b66\u751f\u59d3\u540d \u64cd\u4f5c\u6b21\u6570m\uff0c\u540e\u8ddfm\u884c\u64cd\u4f5c\uff0c\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff1a assign \u5b66\u751f //\u4e3a\u5b66\u751f\u5206\u914d\u5bbf\u820d\uff0c\u4ece\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5934\u6458\u53d6\u4e00\u95f4\u5bbf\u820d\uff0c //\u6309\u5bbf\u820d\u53f7\u5347\u5e8f\u6302\u5728\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u3002 return \u5bbf\u820d\u53f7 //\u5b66\u751f\u9000\u5bbf\u820d\uff0c\u5220\u9664\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u5bf9\u5e94\u7ed3\u70b9\uff0c //\u6302\u5728\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u5c3e\u90e8\u3002 display_free //\u8f93\u51fa\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002 display_used //\u8f93\u51fa\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4fe1\u606f\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_3","text":"display_free\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u53ef\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002 display_used\u4f9d\u6b21\u8f93\u51fa\u5f53\u524d\u5df2\u7528\u5bbf\u820d\u94fe\u8868\u4e2d\u7684\u5b66\u751f\u548c\u5bbf\u820d\u53f7\uff0c\u5177\u4f53\u683c\u5f0f\u89c1\u6837\u4f8b\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_4","text":"5 \u674e\u660e 103 \u5f20\u4e09 106 \u738b\u4e94 107 \u94b1\u4f1f 112 \u7ae0\u7acb 118 8 assign \u674e\u56db assign \u8d75\u516d return 118 return 101 assign \u9a6c\u5c71 display_used assign \u6797\u7acb display_free","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1245/#_5","text":"\u8d75\u516d(102)-\u674e\u660e(103)-\u9a6c\u5c71(104)-\u5f20\u4e09(106)-\u738b\u4e94(107)-\u94b1\u4f1f(112) 108-109-110-111-113-114-115-116-117-119-120-118-101","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1245/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1245/#_7","text":"#include <iostream> #include <list> #include <string> #include <algorithm> class Student { public : std :: string name ; int room ; Student ( std :: string & name , int room ) : name ( name ), room ( room ) {} }; class DormMgr { public : DormMgr () { for ( int i = 101 ; i <= 120 ; ++ i ) { freeDorm . push_back ( i ); } } void initialize () { std :: string name ; int room ; std :: cin >> name >> room ; freeDorm . remove ( room ); usedDorm . push_back ( Student ( name , room )); } void operate () { std :: string operation ; std :: cin >> operation ; if ( operation == \"assign\" ) { std :: string name ; std :: cin >> name ; int room = freeDorm . front (); freeDorm . pop_front (); usedDorm . push_back ( Student ( name , room )); usedDorm . sort (); } else if ( operation == \"return\" ) { int room ; std :: cin >> room ; for ( std :: list < Student >:: iterator it = usedDorm . begin (); it != usedDorm . end (); ++ it ) { if ( room == it -> room ) { usedDorm . erase ( it ); freeDorm . push_back ( room ); break ; } } } else if ( operation == \"display_free\" ) { std :: cout << freeDorm . front (); for ( std :: list < int >:: iterator it = ++ freeDorm . begin (); it != freeDorm . end (); ++ it ) { std :: cout << '-' << * it ; } std :: cout << std :: endl ; } else if ( operation == \"display_used\" ) { std :: cout << usedDorm . front (). name << '(' << usedDorm . front (). room << ')' ; for ( std :: list < Student >:: iterator it = ++ usedDorm . begin (); it != usedDorm . end (); ++ it ) { std :: cout << '-' << it -> name << '(' << it -> room << ')' ; } std :: cout << std :: endl ; } } private : std :: list < int > freeDorm ; std :: list < Student > usedDorm ; }; bool operator < ( const Student & lhs , const Student & rhs ) { return lhs . room < rhs . room ; } int main () { class DormMgr dormMgr ; int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . initialize (); } std :: cin >> ctrl ; while ( ctrl -- ) { dormMgr . operate (); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1260/","text":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5c3e\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865\u529f\u80fd \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570 \u8f93\u51fa \u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u8868\u793a\u4e3a\u6570\u636e\u6240\u5728\u4f4d\u7f6e[0\uff0c11\uff09\u548c\u67e5\u627e\u6b21\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u5f00 \u6837\u4f8b\u8f93\u5165 6 11 23 39 48 75 62 6 39 52 52 63 63 52 \u6837\u4f8b\u8f93\u51fa 6 1 error 8 1 error 8 2 8 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; while ( ptr -> next != NULL ) { ptr = ptr -> next ; } ptr -> next = new Node (); ptr = ptr -> next ; ptr -> data = data ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865"},{"location":"szu_oj/ds/1260/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865"},{"location":"szu_oj/ds/1260/#_2","text":"\u7ed9\u51fa\u4e00\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5efa\u7acb\u54c8\u5e0c\u8868\uff0c\u91c7\u7528\u6c42\u4f59\u6cd5\u4f5c\u4e3a\u54c8\u5e0c\u51fd\u6570\uff0c\u6a21\u6570\u4e3a11\uff0c\u54c8\u5e0c\u51b2\u7a81\u7528\u94fe\u5730\u5740\u6cd5\u548c\u8868\u5c3e\u63d2\u5165 \u5982\u679c\u9996\u6b21\u67e5\u627e\u5931\u8d25\uff0c\u5c31\u628a\u6570\u636e\u63d2\u5165\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\u4e2d \u5b9e\u73b0\u54c8\u5e0c\u67e5\u627e\u4e0e\u589e\u8865\u529f\u80fd","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1260/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165n\uff0c\u8868\u793a\u6709n\u4e2a\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165n\u4e2a\u6570\u636e\uff0c\u90fd\u662f\u81ea\u7136\u6570\u4e14\u4e92\u4e0d\u76f8\u540c\uff0c\u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00 \u7b2c\u4e09\u884c\u8f93\u5165t\uff0c\u8868\u793a\u8981\u67e5\u627et\u4e2a\u6570\u636e \u4ece\u7b2c\u56db\u884c\u8d77\uff0c\u6bcf\u884c\u8f93\u5165\u4e00\u4e2a\u8981\u67e5\u627e\u7684\u6570\u636e\uff0c\u90fd\u662f\u6b63\u6574\u6570","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1260/#_4","text":"\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u6570\u636e\u7684\u67e5\u627e\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u8868\u793a\u4e3a\u6570\u636e\u6240\u5728\u4f4d\u7f6e[0\uff0c11\uff09\u548c\u67e5\u627e\u6b21\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u5206\u5f00","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1260/#_5","text":"6 11 23 39 48 75 62 6 39 52 52 63 63 52","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1260/#_6","text":"6 1 error 8 1 error 8 2 8 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1260/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1260/#_8","text":"#include <iostream> #include <vector> class HashTable { public : HashTable () : hash_ ( P ) {} void insert ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; while ( ptr -> next != NULL ) { ptr = ptr -> next ; } ptr -> next = new Node (); ptr = ptr -> next ; ptr -> data = data ; } void searchOrInsertThenPrint ( int data ) { int result = search ( data ); if ( result == - 1 ) { std :: cout << \"error\" << std :: endl ; insert ( data ); } else { std :: cout << data % P << ' ' << result << std :: endl ; } } int search ( int data ) { int index = data % P ; Node * ptr = & hash_ [ index ]; int count = 0 ; while ( ptr -> next != NULL ) { ptr = ptr -> next ; count += 1 ; if ( ptr -> data == data ) { return count ; } } return - 1 ; } private : static const int P = 11 ; struct Node { int data ; Node * next ; Node () : data (), next ( NULL ) {} }; std :: vector < Node > hash_ ; }; int main () { size_t size ; std :: cin >> size ; class HashTable hashTable ; for ( int i = 0 ; i < size ; ++ i ) { int number ; std :: cin >> number ; hashTable . insert ( number ); } size_t time ; std :: cin >> time ; for ( int i = 0 ; i < time ; ++ i ) { int number ; std :: cin >> number ; hashTable . searchOrInsertThenPrint ( number ); } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1264/","text":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u4f7f\u7528\u76f4\u63d2\u6392\u5e8f\u5b8c\u6210\u6570\u636e\u7684\u5347\u5e8f\u6392\u5e8f\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u6570\u636e\u4e2a\u6570n\uff0cn\u4e2a\u6570\u636e \u8f93\u51fa \u76f4\u63d2\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c \u6837\u4f8b\u8f93\u5165 7 34 23 677 2 1 453 3 \u6837\u4f8b\u8f93\u51fa 23 34 677 2 1 453 3 23 34 677 2 1 453 3 2 23 34 677 1 453 3 1 2 23 34 677 453 3 1 2 23 34 453 677 3 1 2 3 23 34 453 677 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } for ( int i1 = 1 ; i1 < vector . size (); ++ i1 ) { int key = vector [ i1 ]; for ( int i2 = i1 - 1 ; i2 >= 0 ; -- i2 ) { if ( vector [ i2 ] > key ) { vector [ i2 + 1 ] = vector [ i2 ]; vector [ i2 ] = key ; } else { break ; } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; }","title":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f"},{"location":"szu_oj/ds/1264/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5185\u6392\u2014\u76f4\u63d2\u6392\u5e8f"},{"location":"szu_oj/ds/1264/#_1","text":"\u7ed9\u5b9a\u4e00\u7ec4\u6570\u636e\uff0c\u4f7f\u7528\u76f4\u63d2\u6392\u5e8f\u5b8c\u6210\u6570\u636e\u7684\u5347\u5e8f\u6392\u5e8f\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1264/#_2","text":"\u6570\u636e\u4e2a\u6570n\uff0cn\u4e2a\u6570\u636e","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1264/#_3","text":"\u76f4\u63d2\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1264/#_4","text":"7 34 23 677 2 1 453 3","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1264/#_5","text":"23 34 677 2 1 453 3 23 34 677 2 1 453 3 2 23 34 677 1 453 3 1 2 23 34 677 453 3 1 2 23 34 453 677 3 1 2 3 23 34 453 677","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1264/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1264/#_7","text":"#include <iostream> #include <vector> int main () { int size ; std :: cin >> size ; std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } for ( int i1 = 1 ; i1 < vector . size (); ++ i1 ) { int key = vector [ i1 ]; for ( int i2 = i1 - 1 ; i2 >= 0 ; -- i2 ) { if ( vector [ i2 ] > key ) { vector [ i2 + 1 ] = vector [ i2 ]; vector [ i2 ] = key ; } else { break ; } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1268/","text":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u7ec4\u5b57\u7b26\u4e32\uff0c\u75282-\u8def\u5f52\u5e76\u6392\u5e8f\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\u6570\u636e\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e0d\u542b\u7a7a\u683c\u3002 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa2-\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u51fa\u4e4b\u95f4\u67091\u7a7a\u884c\u3002 \u6837\u4f8b\u8f93\u5165 2 6 shenzhen beijing guangzhou futian nanshan baoan 10 apple pear peach grape cherry dew fig haw lemon marc \u6837\u4f8b\u8f93\u51fa shenzhen beijing guangzhou futian nanshan baoan shenzhen guangzhou futian beijing nanshan baoan shenzhen nanshan guangzhou futian beijing baoan pear apple peach grape dew cherry haw fig marc lemon pear peach grape apple haw fig dew cherry marc lemon pear peach haw grape fig dew cherry apple marc lemon pear peach marc lemon haw grape fig dew cherry apple \u63d0\u793a \u89e3\u51b3\u65b9\u6848 \u5199\u5f97\u592a\u5dee\u4e86\u90fd\u5feb\u4e0d\u597d\u610f\u601d\u53d1\u4e86 #include <iostream> #include <string> #include <vector> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < std :: string > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int base = 2 ; while ( base <= size * 2 ) { for ( int i1 = 0 ; i1 < vector . size (); i1 += base ) { for ( int i2 = 0 ; i2 < base - 1 ; ++ i2 ) { for ( int i3 = 0 ; i3 < base - i2 - 1 ; ++ i3 ) { if ( i1 + i3 + 1 >= vector . size ()) { continue ; } if ( vector [ i1 + i3 ] < vector [ i1 + i3 + 1 ]) { std :: swap ( vector [ i1 + i3 ], vector [ i1 + i3 + 1 ]); } } } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; base *= 2 ; } std :: cout << std :: endl ; } return 0 ; }","title":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f"},{"location":"szu_oj/ds/1268/#ds2-","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u5185\u6392\u20142-\u8def\u5f52\u5e76\u6392\u5e8f"},{"location":"szu_oj/ds/1268/#_1","text":"\u8f93\u5165\u4e00\u7ec4\u5b57\u7b26\u4e32\uff0c\u75282-\u8def\u5f52\u5e76\u6392\u5e8f\u6309\u5b57\u5178\u987a\u5e8f\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1268/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff1a\u6570\u636e\u4e2a\u6570n\uff0c\u540e\u8ddfn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5b57\u7b26\u4e32\u4e0d\u542b\u7a7a\u683c\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1268/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa2-\u8def\u5f52\u5e76\u6392\u5e8f\u7684\u6bcf\u4e00\u8d9f\u6392\u5e8f\u7ed3\u679c\u3002\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u8f93\u51fa\u4e4b\u95f4\u67091\u7a7a\u884c\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1268/#_4","text":"2 6 shenzhen beijing guangzhou futian nanshan baoan 10 apple pear peach grape cherry dew fig haw lemon marc","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1268/#_5","text":"shenzhen beijing guangzhou futian nanshan baoan shenzhen guangzhou futian beijing nanshan baoan shenzhen nanshan guangzhou futian beijing baoan pear apple peach grape dew cherry haw fig marc lemon pear peach grape apple haw fig dew cherry marc lemon pear peach haw grape fig dew cherry apple marc lemon pear peach marc lemon haw grape fig dew cherry apple","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1268/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1268/#_7","text":"\u5199\u5f97\u592a\u5dee\u4e86\u90fd\u5feb\u4e0d\u597d\u610f\u601d\u53d1\u4e86 #include <iostream> #include <string> #include <vector> int main () { int ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { int size ; std :: cin >> size ; std :: vector < std :: string > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int base = 2 ; while ( base <= size * 2 ) { for ( int i1 = 0 ; i1 < vector . size (); i1 += base ) { for ( int i2 = 0 ; i2 < base - 1 ; ++ i2 ) { for ( int i3 = 0 ; i3 < base - i2 - 1 ; ++ i3 ) { if ( i1 + i3 + 1 >= vector . size ()) { continue ; } if ( vector [ i1 + i3 ] < vector [ i1 + i3 + 1 ]) { std :: swap ( vector [ i1 + i3 ], vector [ i1 + i3 + 1 ]); } } } } std :: cout << vector . front (); for ( int i = 1 ; i < vector . size (); ++ i ) { std :: cout << ' ' << vector [ i ]; } std :: cout << std :: endl ; base *= 2 ; } std :: cout << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1269/","text":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09 \u6837\u4f8b\u8f93\u5165 1 12 10 22 19 21 8 9 30 33 4 15 14 4 22 56 30 17 \u6837\u4f8b\u8f93\u51fa 22 30 33 14 4 15 NULL NULL 19 8 21 9 1 1 1 0 6 1 6 2 0 1 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; while ( hash_ [ number % P + index ] != - 1 ) { index += 1 ; if ( number % P + index == hash_ . size ()) { index = - ( number % P ); } } hash_ [ number % P + index ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 1 , index = 0 ; while ( hash_ [ data % P + index ] != data ) { if ( count == hash_ . size () || hash_ [ data % P + index ] == - 1 ) { result = 0 ; break ; } index += 1 ; count += 1 ; if ( data % P + index == hash_ . size ()) { index = - ( data % P ); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { int position = data % P + index + 1 ; std :: cout << ' ' << position ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1269/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1269/#_1","text":"\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u7ebf\u6027\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 --\u7a0b\u5e8f\u8981\u6c42-- \u82e5\u4f7f\u7528C++\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6iostream\uff1b\u82e5\u4f7f\u7528C\u8bed\u8a00\u53ea\u80fdinclude\u4e00\u4e2a\u5934\u6587\u4ef6stdio \u7a0b\u5e8f\u4e2d\u82e5include\u591a\u8fc7\u4e00\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0d\u770b\u4ee3\u7801\uff0c\u4f5c0\u5206\u5904\u7406 \u4e0d\u5141\u8bb8\u4f7f\u7528\u7b2c\u4e09\u65b9\u5bf9\u8c61\u6216\u51fd\u6570\u5b9e\u73b0\u672c\u9898\u7684\u8981\u6c42","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1269/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1269/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1269/#_4","text":"1 12 10 22 19 21 8 9 30 33 4 15 14 4 22 56 30 17","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1269/#_5","text":"22 30 33 14 4 15 NULL NULL 19 8 21 9 1 1 1 0 6 1 6 2 0 1","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1269/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1269/#_7","text":"#include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; while ( hash_ [ number % P + index ] != - 1 ) { index += 1 ; if ( number % P + index == hash_ . size ()) { index = - ( number % P ); } } hash_ [ number % P + index ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 1 , index = 0 ; while ( hash_ [ data % P + index ] != data ) { if ( count == hash_ . size () || hash_ [ data % P + index ] == - 1 ) { result = 0 ; break ; } index += 1 ; count += 1 ; if ( data % P + index == hash_ . size ()) { index = - ( data % P ); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { int position = data % P + index + 1 ; std :: cout << ' ' << position ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1309/","text":"\u5192\u6ce1\u6392\u5e8f (Ver. I) \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4ece0\u5230n-1\u5404\u4e00\u6b21\u7684\u6570\u7ec4\uff0c\u82e5\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u5c06\u5176\u6392\u4e3a\u5347\u5e8f\uff0c\u95ee\u5176\u4e2d\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u4ea4\u6362 \u8f93\u5165 \u6d4b\u8bd5\u6570\u636e\u6709\u591a\u7ec4\uff0c \u6bcf\u7ec4\u7531\u4e24\u884c\u7ec4\u6210\uff1a\u7b2c\u4e00\u884c\u5305\u542b\u6b63\u6574\u6570n\uff08n <= 5000\uff09; \u4e0b\u4e00\u884c\u5305\u542b\u4ece0\u5230n-1\u7684n\u4e2a\u6574\u6570\u7684\u5e8f\u5217\u3002 \u8f93\u51fa \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u8f93\u51fa\u4ea4\u6362\u6b21\u6570 \u6837\u4f8b\u8f93\u5165 10 1 3 6 9 0 8 5 7 4 2 \u6837\u4f8b\u8f93\u51fa 22 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> int main () { int size ; while ( std :: cin >> size ) { std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int count = 0 ; for ( int i1 = 0 ; i1 < vector . size () - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < vector . size () - 1 - i1 ; ++ i2 ) { if ( vector [ i2 ] > vector [ i2 + 1 ]) { std :: swap ( vector [ i2 ], vector [ i2 + 1 ]); count += 1 ; } } } std :: cout << count << std :: endl ; } return 0 ; }","title":"\u5192\u6ce1\u6392\u5e8f (Ver. I)"},{"location":"szu_oj/ds/1309/#ver-i","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5192\u6ce1\u6392\u5e8f (Ver. I)"},{"location":"szu_oj/ds/1309/#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u4ece0\u5230n-1\u5404\u4e00\u6b21\u7684\u6570\u7ec4\uff0c\u82e5\u4f7f\u7528\u5192\u6ce1\u6392\u5e8f\u5c06\u5176\u6392\u4e3a\u5347\u5e8f\uff0c\u95ee\u5176\u4e2d\u9700\u8981\u8fdb\u884c\u591a\u5c11\u6b21\u4ea4\u6362","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1309/#_2","text":"\u6d4b\u8bd5\u6570\u636e\u6709\u591a\u7ec4\uff0c \u6bcf\u7ec4\u7531\u4e24\u884c\u7ec4\u6210\uff1a\u7b2c\u4e00\u884c\u5305\u542b\u6b63\u6574\u6570n\uff08n <= 5000\uff09; \u4e0b\u4e00\u884c\u5305\u542b\u4ece0\u5230n-1\u7684n\u4e2a\u6574\u6570\u7684\u5e8f\u5217\u3002","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1309/#_3","text":"\u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c \u8f93\u51fa\u4ea4\u6362\u6b21\u6570","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1309/#_4","text":"10 1 3 6 9 0 8 5 7 4 2","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1309/#_5","text":"22","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1309/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1309/#_7","text":"#include <iostream> #include <vector> int main () { int size ; while ( std :: cin >> size ) { std :: vector < int > vector ( static_cast < size_t > ( size )); for ( int i = 0 ; i < size ; ++ i ) { std :: cin >> vector [ i ]; } int count = 0 ; for ( int i1 = 0 ; i1 < vector . size () - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < vector . size () - 1 - i1 ; ++ i2 ) { if ( vector [ i2 ] > vector [ i2 + 1 ]) { std :: swap ( vector [ i2 ], vector [ i2 + 1 ]); count += 1 ; } } } std :: cout << count << std :: endl ; } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/ds/1318/","text":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57 \u8f93\u51fa \u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a 0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09 \u6837\u4f8b\u8f93\u5165 1 12 10 22 19 21 8 9 30 33 4 41 13 4 22 15 30 41 \u6837\u4f8b\u8f93\u51fa 22 9 13 NULL 4 41 NULL 30 19 8 21 33 1 1 1 0 3 1 3 8 1 6 6 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; int position = number % P ; int sign = 1 ; while ( hash_ [ position ] != - 1 ) { position = number % P + index * index * sign ; sign = - sign ; if ( sign == 1 ) { index += 1 ; } if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } hash_ [ position ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 0 , index = 0 , sign = - 1 ; int position = data % P + index * index ; while ( count += 1 , hash_ [ position ] != data ) { if ( count == hash_ . size () || hash_ [ position ] == - 1 ) { result = 0 ; break ; } sign = - sign ; if ( sign == 1 ) { index += 1 ; } position = data % P + index * index * sign ; if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { std :: cout << ' ' << position + 1 ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1318/#ds","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"DS\u54c8\u5e0c\u67e5\u627e\u2014\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217"},{"location":"szu_oj/ds/1318/#_1","text":"\u5b9a\u4e49\u54c8\u5e0c\u51fd\u6570\u4e3aH(key) = key%11\u3002\u8f93\u5165\u8868\u957f\uff08\u5927\u4e8e\u3001\u7b49\u4e8e11\uff09\uff0c\u8f93\u5165\u5173\u952e\u5b57\u96c6\u5408\uff0c\u7528\u4e8c\u6b21\u63a2\u6d4b\u518d\u6563\u5217\u6784\u5efa\u54c8\u5e0c\u8868\uff0c\u5e76\u67e5\u627e\u7ed9\u5b9a\u5173\u952e\u5b57\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/ds/1318/#_2","text":"\u6d4b\u8bd5\u6b21\u6570t \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u683c\u5f0f\u5982\u4e0b\uff1a \u54c8\u5e0c\u8868\u957fm\u3001\u5173\u952e\u5b57\u4e2a\u6570n n\u4e2a\u5173\u952e\u5b57 \u67e5\u627e\u6b21\u6570k k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57","title":"\u8f93\u5165"},{"location":"szu_oj/ds/1318/#_3","text":"\u5bf9\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u4ee5\u4e0b\u4fe1\u606f\uff1a \u6784\u9020\u7684\u54c8\u5e0c\u8868\u4fe1\u606f\uff0c\u6570\u7ec4\u4e2d\u6ca1\u6709\u5173\u952e\u5b57\u7684\u4f4d\u7f6e\u8f93\u51faNULL \u5bf9k\u4e2a\u5f85\u67e5\u5173\u952e\u5b57\uff0c\u5206\u522b\u8f93\u51fa\uff1a 0\u62161\uff080\u2014\u4e0d\u6210\u529f\uff0c1\u2014\u6210\u529f\uff09\u3001\u6bd4\u8f83\u6b21\u6570\u3001\u67e5\u627e\u6210\u529f\u7684\u4f4d\u7f6e\uff08\u4ece1\u5f00\u59cb\uff09","title":"\u8f93\u51fa"},{"location":"szu_oj/ds/1318/#_4","text":"1 12 10 22 19 21 8 9 30 33 4 41 13 4 22 15 30 41","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/ds/1318/#_5","text":"22 9 13 NULL 4 41 NULL 30 19 8 21 33 1 1 1 0 3 1 3 8 1 6 6","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/ds/1318/#_6","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/ds/1318/#_7","text":"#include <iostream> #include <vector> class HashTable { public : explicit HashTable ( size_t size ) : hash_ ( size , - 1 ) {} void setFromCin () { size_t length ; std :: cin >> length ; for ( int i = 0 ; i < length ; ++ i ) { int number , index = 0 ; std :: cin >> number ; int position = number % P ; int sign = 1 ; while ( hash_ [ position ] != - 1 ) { position = number % P + index * index * sign ; sign = - sign ; if ( sign == 1 ) { index += 1 ; } if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } hash_ [ position ] = number ; } std :: cout << hash_ . front (); for ( int i = 1 ; i < hash_ . size (); ++ i ) { if ( hash_ [ i ] == - 1 ) { std :: cout << \" NULL\" ; } else { std :: cout << ' ' << hash_ [ i ]; } } std :: cout << std :: endl ; } void searchAndPrint ( int data ) { int result = 1 , count = 0 , index = 0 , sign = - 1 ; int position = data % P + index * index ; while ( count += 1 , hash_ [ position ] != data ) { if ( count == hash_ . size () || hash_ [ position ] == - 1 ) { result = 0 ; break ; } sign = - sign ; if ( sign == 1 ) { index += 1 ; } position = data % P + index * index * sign ; if ( position > static_cast < int > ( hash_ . size ())) { position = position - static_cast < int > ( hash_ . size ()); } else if ( position < 0 ) { position = position + static_cast < int > ( hash_ . size ()); } } std :: cout << result << ' ' << count ; if ( result == 1 ) { std :: cout << ' ' << position + 1 ; } std :: cout << std :: endl ; } private : static const int P = 11 ; std :: vector < int > hash_ ; }; int main () { size_t ctrl ; std :: cin >> ctrl ; while ( ctrl -- ) { size_t size ; std :: cin >> size ; class HashTable hashTable ( size ); hashTable . setFromCin (); int time ; std :: cin >> time ; while ( time -- ) { int number ; std :: cin >> number ; hashTable . searchAndPrint ( number ); } } return 0 ; }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/uooc/1334/","text":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570) \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u4ece\u952e\u76d8\u8f93\u516510\u4e2a\u6574\u6570\uff0810\u4e2a\u6574\u6570\u5747\u4e0d\u76f8\u540c\uff09\uff0c \u7136\u540e\u518d\u4ece\u952e\u76d8\u4e2d\u8f93\u5165\u4e00\u4e2a\u6574\u6570a\uff0c \u5982\u679c\u8be5\u6574\u6570a\u4e3a\u5947\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6574\u6570\u4e2d\u7684\u4efb\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u5220\u6389\u4e0ea\u76f8\u540c\u7684 \u8fd9\u4e2a\u6570\uff0c\u5e76\u5c06\u5269\u4e0b\u76849\u4e2a\u6570\u6309\u5347\u5e8f\u6392\u5e8f\u8f93\u51fa\uff1b \u82e5a\u4e3a\u5076\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6570\u90fd\u4e0d\u540c\uff0c\u5219\u52a0\u5165a\uff0c\u5e76\u5c06\u8fd911\u4e2a\u6570\u964d\u5e8f\u6392 \u5e8f\u8f93\u51fa\uff1b \u5426\u5219\uff0c\u5219\u5c06\u8fd910\u4e2a\u6570\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\uff0c \u964d\u5e8f\u6392\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c10\u4e2a\u6570\u5206\u522b\u4e3a6\uff0c89\uff0c34\uff0c12\uff0c 0\uff0c-8\uff0c78\uff0c15\uff0c9\uff0c3. \u82e5a\u4e3a9\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a-8\uff0c0\uff0c3\uff0c 6\uff0c12\uff0c15\uff0c34\uff0c78\uff0c89. \u82e5a\u4e3a2\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a89\uff0c78\uff0c 34\uff0c15\uff0c12\uff0c9\uff0c6\uff0c3\uff0c2\uff0c0\uff0c-8. \u82e5a\u4e3a7\u6216\u800512\uff0c\u5219 \u8f93\u51fa\u4e3a\uff1a89\uff0c15\uff0c9\uff0c3\uff0c78\uff0c34\uff0c12\uff0c6\uff0c0\uff0c-8. \u8981\u6c42\uff1a\u4f7f\u7528\u51fd\u6570\u89e3\u51b3\u672c\u9898\uff0c\u81f3\u5c11\u7f16\u5199\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570\uff0c 1\u3001\u5347\u5e8f\u6392\u5e8f\u51fd\u6570void sort(int a[], int n)\uff1b 2\u3001\u67e5\u627e\u51fd\u6570int find(int a[],int n,int value)----\u5728\u5927\u5c0f\u4e3an\u7684a\u6570\u7ec4\u4e2d\u67e5\u627e\u503c\u4e3avalue\u7684\u5143\u7d20\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u627e\u4e0d\u5230\uff0c\u5c31\u8fd4\u56de-1\uff1b 3\u3001\u8f93\u51fa\u51fd\u6570display(int a[], int n)---\u9010\u4e2a\u8f93\u51fa\u6570\u7ec4a\u7684\u5143\u7d20\uff1b 4\u3001\u53cd\u8f6c\u6570\u7ec4\u51fd\u6570void reverse(int a[], int n)----\u5c06\u6570\u7ec4\u9006\u5e8f\u3002 \u8f93\u5165 \u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570n \u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e00\u7ec4\u7684\u6574\u6570a \u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e8c\u7ec4\u7684\u6574\u6570a ...... \u7b2cn\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2cn\u7ec4\u7684\u6574\u6570a \u8f93\u51fa \u7b2c\u4e00\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u7b2c\u4e8c\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa ....... \u7b2cn\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u6837\u4f8b\u8f93\u5165 3 6 89 34 12 0 -8 78 15 9 3 9 6 89 34 12 0 -8 78 15 9 3 2 6 89 34 12 0 -8 78 15 9 3 7 \u6837\u4f8b\u8f93\u51fa -8 0 3 6 12 15 34 78 89 89 78 34 15 12 9 6 3 2 0 -8 89 15 9 3 78 34 12 6 0 -8 \u63d0\u793a \u89e3\u51b3\u65b9\u6848 #include <stdio.h> #define FAILED_FIND_IN_ARRAY -1 struct Array { int data [ 16 ]; int size ; }; void scanToArray ( struct Array * array ); int findInArray ( struct Array * array , int data ); void sortArray ( struct Array * array ); void reverseArray ( struct Array * array ); void sortArrayInOddAndEven ( struct Array * array ); void printArray ( struct Array * array ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Array array = {}; scanToArray ( & array ); int number ; scanf ( \"%d\" , & number ); if ( number % 2 != 0 && findInArray ( & array , number ) != FAILED_FIND_IN_ARRAY ) { array . size -= 1 ; for ( int i = findInArray ( & array , number ); i < array . size ; ++ i ) { array . data [ i ] = array . data [ i + 1 ]; } sortArray ( & array ); } else if ( number % 2 == 0 && findInArray ( & array , number ) == FAILED_FIND_IN_ARRAY ) { array . data [ array . size ] = number ; array . size += 1 ; sortArray ( & array ); reverseArray ( & array ); } else { sortArrayInOddAndEven ( & array ); } printArray ( & array ); } return 0 ; } void scanToArray ( struct Array * array ) { array -> size = 10 ; for ( int i = 0 ; i < array -> size ; ++ i ) { scanf ( \"%d\" , & array -> data [ i ]); } } int findInArray ( struct Array * array , int data ) { for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] == data ) { return i ; } } return - 1 ; } void sortArray ( struct Array * array ) { for ( int i1 = 0 ; i1 < array -> size - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < array -> size - 1 - i1 ; ++ i2 ) { if ( array -> data [ i2 ] > array -> data [ i2 + 1 ]) { int data = array -> data [ i2 ]; array -> data [ i2 ] = array -> data [ i2 + 1 ]; array -> data [ i2 + 1 ] = data ; } } } } void reverseArray ( struct Array * array ) { for ( int i = 0 ; i < array -> size / 2 ; ++ i ) { int data = array -> data [ i ]; array -> data [ i ] = array -> data [ array -> size - 1 - i ]; array -> data [ array -> size - 1 - i ] = data ; } } void sortArrayInOddAndEven ( struct Array * array ) { struct Array odd = {}, even = {}; for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] % 2 == 0 ) { even . data [ even . size ] = array -> data [ i ]; even . size += 1 ; } else { odd . data [ odd . size ] = array -> data [ i ]; odd . size += 1 ; } } sortArray ( & odd ); reverseArray ( & odd ); sortArray ( & even ); reverseArray ( & even ); for ( int i = 0 ; i < odd . size ; ++ i ) { array -> data [ i ] = odd . data [ i ]; } for ( int i = 0 ; i < even . size ; ++ i ) { array -> data [ i + odd . size ] = even . data [ i ]; } } void printArray ( struct Array * array ) { printf ( \"%d\" , array -> data [ 0 ]); for ( int i = 1 ; i < array -> size ; ++ i ) { printf ( \" %d\" , array -> data [ i ]); } printf ( \" \\n \" ); }","title":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570)"},{"location":"szu_oj/uooc/1334/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u5206\u7c7b\u6392\u5e8f(\u51fd\u6570)"},{"location":"szu_oj/uooc/1334/#_2","text":"\u4ece\u952e\u76d8\u8f93\u516510\u4e2a\u6574\u6570\uff0810\u4e2a\u6574\u6570\u5747\u4e0d\u76f8\u540c\uff09\uff0c \u7136\u540e\u518d\u4ece\u952e\u76d8\u4e2d\u8f93\u5165\u4e00\u4e2a\u6574\u6570a\uff0c \u5982\u679c\u8be5\u6574\u6570a\u4e3a\u5947\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6574\u6570\u4e2d\u7684\u4efb\u4e00\u4e2a\u6570\u76f8\u540c\uff0c\u5219\u5220\u6389\u4e0ea\u76f8\u540c\u7684 \u8fd9\u4e2a\u6570\uff0c\u5e76\u5c06\u5269\u4e0b\u76849\u4e2a\u6570\u6309\u5347\u5e8f\u6392\u5e8f\u8f93\u51fa\uff1b \u82e5a\u4e3a\u5076\u6570\uff0c \u4e14\u4e0e\u8fd910\u4e2a\u6570\u90fd\u4e0d\u540c\uff0c\u5219\u52a0\u5165a\uff0c\u5e76\u5c06\u8fd911\u4e2a\u6570\u964d\u5e8f\u6392 \u5e8f\u8f93\u51fa\uff1b \u5426\u5219\uff0c\u5219\u5c06\u8fd910\u4e2a\u6570\u5947\u6570\u5728\u524d\uff0c\u5076\u6570\u5728\u540e\uff0c \u964d\u5e8f\u6392\u5217\u8f93\u51fa\u3002 \u4f8b\u5982\uff0c10\u4e2a\u6570\u5206\u522b\u4e3a6\uff0c89\uff0c34\uff0c12\uff0c 0\uff0c-8\uff0c78\uff0c15\uff0c9\uff0c3. \u82e5a\u4e3a9\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a-8\uff0c0\uff0c3\uff0c 6\uff0c12\uff0c15\uff0c34\uff0c78\uff0c89. \u82e5a\u4e3a2\uff0c\u5219\u8f93\u51fa\u4e3a\uff1a89\uff0c78\uff0c 34\uff0c15\uff0c12\uff0c9\uff0c6\uff0c3\uff0c2\uff0c0\uff0c-8. \u82e5a\u4e3a7\u6216\u800512\uff0c\u5219 \u8f93\u51fa\u4e3a\uff1a89\uff0c15\uff0c9\uff0c3\uff0c78\uff0c34\uff0c12\uff0c6\uff0c0\uff0c-8. \u8981\u6c42\uff1a\u4f7f\u7528\u51fd\u6570\u89e3\u51b3\u672c\u9898\uff0c\u81f3\u5c11\u7f16\u5199\u4ee5\u4e0b\u51e0\u4e2a\u51fd\u6570\uff0c 1\u3001\u5347\u5e8f\u6392\u5e8f\u51fd\u6570void sort(int a[], int n)\uff1b 2\u3001\u67e5\u627e\u51fd\u6570int find(int a[],int n,int value)----\u5728\u5927\u5c0f\u4e3an\u7684a\u6570\u7ec4\u4e2d\u67e5\u627e\u503c\u4e3avalue\u7684\u5143\u7d20\uff0c\u627e\u5230\u5c31\u8fd4\u56de\u5143\u7d20\u7684\u4e0b\u6807\uff0c\u627e\u4e0d\u5230\uff0c\u5c31\u8fd4\u56de-1\uff1b 3\u3001\u8f93\u51fa\u51fd\u6570display(int a[], int n)---\u9010\u4e2a\u8f93\u51fa\u6570\u7ec4a\u7684\u5143\u7d20\uff1b 4\u3001\u53cd\u8f6c\u6570\u7ec4\u51fd\u6570void reverse(int a[], int n)----\u5c06\u6570\u7ec4\u9006\u5e8f\u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/uooc/1334/#_3","text":"\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570n \u7b2c\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e00\u7ec4\u7684\u6574\u6570a \u7b2c\u4e8c\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2c\u4e8c\u7ec4\u7684\u6574\u6570a ...... \u7b2cn\u7ec4\u6d4b\u8bd5\u6570\u636e\u768410\u4e2a\u6574\u6570 \u7b2cn\u7ec4\u7684\u6574\u6570a","title":"\u8f93\u5165"},{"location":"szu_oj/uooc/1334/#_4","text":"\u7b2c\u4e00\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa \u7b2c\u4e8c\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa ....... \u7b2cn\u7ec4\u6570\u636e\u6392\u5e8f\u8f93\u51fa","title":"\u8f93\u51fa"},{"location":"szu_oj/uooc/1334/#_5","text":"3 6 89 34 12 0 -8 78 15 9 3 9 6 89 34 12 0 -8 78 15 9 3 2 6 89 34 12 0 -8 78 15 9 3 7","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/uooc/1334/#_6","text":"-8 0 3 6 12 15 34 78 89 89 78 34 15 12 9 6 3 2 0 -8 89 15 9 3 78 34 12 6 0 -8","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/uooc/1334/#_7","text":"","title":"\u63d0\u793a"},{"location":"szu_oj/uooc/1334/#_8","text":"#include <stdio.h> #define FAILED_FIND_IN_ARRAY -1 struct Array { int data [ 16 ]; int size ; }; void scanToArray ( struct Array * array ); int findInArray ( struct Array * array , int data ); void sortArray ( struct Array * array ); void reverseArray ( struct Array * array ); void sortArrayInOddAndEven ( struct Array * array ); void printArray ( struct Array * array ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Array array = {}; scanToArray ( & array ); int number ; scanf ( \"%d\" , & number ); if ( number % 2 != 0 && findInArray ( & array , number ) != FAILED_FIND_IN_ARRAY ) { array . size -= 1 ; for ( int i = findInArray ( & array , number ); i < array . size ; ++ i ) { array . data [ i ] = array . data [ i + 1 ]; } sortArray ( & array ); } else if ( number % 2 == 0 && findInArray ( & array , number ) == FAILED_FIND_IN_ARRAY ) { array . data [ array . size ] = number ; array . size += 1 ; sortArray ( & array ); reverseArray ( & array ); } else { sortArrayInOddAndEven ( & array ); } printArray ( & array ); } return 0 ; } void scanToArray ( struct Array * array ) { array -> size = 10 ; for ( int i = 0 ; i < array -> size ; ++ i ) { scanf ( \"%d\" , & array -> data [ i ]); } } int findInArray ( struct Array * array , int data ) { for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] == data ) { return i ; } } return - 1 ; } void sortArray ( struct Array * array ) { for ( int i1 = 0 ; i1 < array -> size - 1 ; ++ i1 ) { for ( int i2 = 0 ; i2 < array -> size - 1 - i1 ; ++ i2 ) { if ( array -> data [ i2 ] > array -> data [ i2 + 1 ]) { int data = array -> data [ i2 ]; array -> data [ i2 ] = array -> data [ i2 + 1 ]; array -> data [ i2 + 1 ] = data ; } } } } void reverseArray ( struct Array * array ) { for ( int i = 0 ; i < array -> size / 2 ; ++ i ) { int data = array -> data [ i ]; array -> data [ i ] = array -> data [ array -> size - 1 - i ]; array -> data [ array -> size - 1 - i ] = data ; } } void sortArrayInOddAndEven ( struct Array * array ) { struct Array odd = {}, even = {}; for ( int i = 0 ; i < array -> size ; ++ i ) { if ( array -> data [ i ] % 2 == 0 ) { even . data [ even . size ] = array -> data [ i ]; even . size += 1 ; } else { odd . data [ odd . size ] = array -> data [ i ]; odd . size += 1 ; } } sortArray ( & odd ); reverseArray ( & odd ); sortArray ( & even ); reverseArray ( & even ); for ( int i = 0 ; i < odd . size ; ++ i ) { array -> data [ i ] = odd . data [ i ]; } for ( int i = 0 ; i < even . size ; ++ i ) { array -> data [ i + odd . size ] = even . data [ i ]; } } void printArray ( struct Array * array ) { printf ( \"%d\" , array -> data [ 0 ]); for ( int i = 1 ; i < array -> size ; ++ i ) { printf ( \" %d\" , array -> data [ i ]); } printf ( \" \\n \" ); }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"szu_oj/uooc/1438/","text":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09 \u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e24\u6839\u7b77\u5b50\u5e73\u884c\u7684\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u961f\u5217\u3002\u5c06\u5e26\u6709\u7f16\u53f7\u7684\u9e21\u86cb\u653e\u5230\u4e24\u6839\u7b77\u5b50\u4e4b\u95f4\u53eb\u505a\u5165\u961f(push)\uff0c\u5c06\u7b77\u5b50\u4e4b\u95f4\u7684\u9e21\u86cb\u62ff\u51fa\u6765\u53eb\u505a\u51fa\u961f(pop)\u3002\u4f46\u8fd9\u4e24\u79cd\u65b9\u5f0f\u6709\u7279\u6b8a\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u5165\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5c3e\u90e8\u5411\u91cc\u653e\u5165\uff1b\u5bf9\u4e8e\u51fa\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5934\u90e8\u5411\u5916\u5c06\u9e21\u86cb\u62ff\u51fa\u6765\u3002 \u5c06\u2460\u3001\u2461\u5165\u961f\uff1a \u5934____________\u5c3e _____________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ _____________ ______________ \u5c06\u2460\u3001\u2461\u51fa\u961f\uff1a \u5934____________\u5c3e ______________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ ______________ ______________ \u8f93\u5165 \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\uff0c\u8868\u793a\u6709T\u7ec4\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u6570N\uff0c\u8868\u793a\u6709N(N<=10)\u79cd\u64cd\u4f5c \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e00\u79cd\u64cd\u4f5c\uff0cpush\u8868\u793a\u5c06\u7f16\u53f7\u4e3ax\u7684\u9e21\u86cb\u653e\u5165\u961f\u5217\u4e2d\uff0cpop\u8868\u793a\u62ff\u8d70\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u9e21\u86cb\u3002 \u6570\u636e\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5,\u961f\u5217\u4e2d\u6ca1\u6709\u9e21\u86cb\u65f6\u4e0d\u4f1a\u6709\u51fa\u961f\u64cd\u4f5c\uff01 \u8f93\u51fa \u8f93\u51faN\u79cd\u64cd\u4f5c\u5b8c\u4e4b\u540e\uff0c\u961f\u5217\u4e2d\u86cb\u86cb\u7684\u7f16\u53f7\uff0c\u5982\u679c\u6ca1\u86cb\u4e86\uff0c\u5c31\u8f93\u51fa\"no eggs!\"(\u4e0d\u5305\u62ec\u5f15\u53f7)\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c\u3002 \u6837\u4f8b\u8f93\u5165 2 3 push 1 push 2 push 3 2 push 1 pop \u6837\u4f8b\u8f93\u51fa 1 2 3 no eggs! \u63d0\u793a \u6570\u7ec4\u6a21\u62df\u961f\u5217\uff0c\u7528\u4e0b\u6807\u8bb0\u5f55\u5bf9\u5934\u3001\u961f\u5c3e\u4f4d\u7f6e\u3002 \u89e3\u51b3\u65b9\u6848 #include <stdio.h> struct Queue { int data [ 32 ]; int head , tail ; }; void push ( struct Queue * queue , int data ); void pop ( struct Queue * queue ); void show ( struct Queue * queue ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Queue queue = {}; int time ; scanf ( \"%d\" , & time ); while ( time -- ) { char operation [ 8 ]; scanf ( \"%s\" , operation ); if ( operation [ 1 ] == 'u' ) { int data ; scanf ( \"%d\" , & data ); push ( & queue , data ); } else { pop ( & queue ); } } show ( & queue ); } return 0 ; } void push ( struct Queue * queue , int data ) { queue -> data [ queue -> tail ] = data ; queue -> tail += 1 ; } void pop ( struct Queue * queue ) { queue -> head += 1 ; } void show ( struct Queue * queue ) { if ( queue -> head == queue -> tail ) { printf ( \"no eggs! \\n \" ); } else { printf ( \"%d\" , queue -> data [ queue -> head ]); for ( int i = queue -> head + 1 ; i != queue -> tail ; ++ i ) { printf ( \" %d\" , queue -> data [ i ]); } printf ( \" \\n \" ); } }","title":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09"},{"location":"szu_oj/uooc/1438/#_1","text":"\u65f6\u95f4\u9650\u5236: 1 Sec \u5185\u5b58\u9650\u5236: 128 MB","title":"\u9e21\u86cb\u961f\u5217\uff08\u6570\u7ec4\uff0c\u51fd\u6570\uff09"},{"location":"szu_oj/uooc/1438/#_2","text":"\u5c06\u4e24\u6839\u7b77\u5b50\u5e73\u884c\u7684\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u6784\u6210\u4e86\u4e00\u4e2a\u961f\u5217\u3002\u5c06\u5e26\u6709\u7f16\u53f7\u7684\u9e21\u86cb\u653e\u5230\u4e24\u6839\u7b77\u5b50\u4e4b\u95f4\u53eb\u505a\u5165\u961f(push)\uff0c\u5c06\u7b77\u5b50\u4e4b\u95f4\u7684\u9e21\u86cb\u62ff\u51fa\u6765\u53eb\u505a\u51fa\u961f(pop)\u3002\u4f46\u8fd9\u4e24\u79cd\u65b9\u5f0f\u6709\u7279\u6b8a\u7684\u5b9a\u4e49\uff0c\u5bf9\u4e8e\u5165\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5c3e\u90e8\u5411\u91cc\u653e\u5165\uff1b\u5bf9\u4e8e\u51fa\u961f\uff0c\u53ea\u80fd\u5c06\u9e21\u86cb\u4ece\u961f\u5217\u7684\u5934\u90e8\u5411\u5916\u5c06\u9e21\u86cb\u62ff\u51fa\u6765\u3002 \u5c06\u2460\u3001\u2461\u5165\u961f\uff1a \u5934____________\u5c3e _____________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ _____________ ______________ \u5c06\u2460\u3001\u2461\u51fa\u961f\uff1a \u5934____________\u5c3e ______________ ______________ \u2190 \u2460 \u2190 \u2461 \u2460 \u2190 \u2461 \u2460 \u2461 ______________ ______________ ______________","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"szu_oj/uooc/1438/#_3","text":"\u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6570T\uff0c\u8868\u793a\u6709T\u7ec4\u6570\u636e \u7b2c\u4e8c\u884c\u8f93\u5165\u4e00\u4e2a\u6570N\uff0c\u8868\u793a\u6709N(N<=10)\u79cd\u64cd\u4f5c \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e00\u79cd\u64cd\u4f5c\uff0cpush\u8868\u793a\u5c06\u7f16\u53f7\u4e3ax\u7684\u9e21\u86cb\u653e\u5165\u961f\u5217\u4e2d\uff0cpop\u8868\u793a\u62ff\u8d70\u961f\u5217\u5934\u90e8\u7684\u4e00\u4e2a\u9e21\u86cb\u3002 \u6570\u636e\u8f93\u5165\u4fdd\u8bc1\u5408\u6cd5,\u961f\u5217\u4e2d\u6ca1\u6709\u9e21\u86cb\u65f6\u4e0d\u4f1a\u6709\u51fa\u961f\u64cd\u4f5c\uff01","title":"\u8f93\u5165"},{"location":"szu_oj/uooc/1438/#_4","text":"\u8f93\u51faN\u79cd\u64cd\u4f5c\u5b8c\u4e4b\u540e\uff0c\u961f\u5217\u4e2d\u86cb\u86cb\u7684\u7f16\u53f7\uff0c\u5982\u679c\u6ca1\u86cb\u4e86\uff0c\u5c31\u8f93\u51fa\"no eggs!\"(\u4e0d\u5305\u62ec\u5f15\u53f7)\u6bcf\u7ec4\u8f93\u51fa\u5360\u4e00\u884c\u3002","title":"\u8f93\u51fa"},{"location":"szu_oj/uooc/1438/#_5","text":"2 3 push 1 push 2 push 3 2 push 1 pop","title":"\u6837\u4f8b\u8f93\u5165"},{"location":"szu_oj/uooc/1438/#_6","text":"1 2 3 no eggs!","title":"\u6837\u4f8b\u8f93\u51fa"},{"location":"szu_oj/uooc/1438/#_7","text":"\u6570\u7ec4\u6a21\u62df\u961f\u5217\uff0c\u7528\u4e0b\u6807\u8bb0\u5f55\u5bf9\u5934\u3001\u961f\u5c3e\u4f4d\u7f6e\u3002","title":"\u63d0\u793a"},{"location":"szu_oj/uooc/1438/#_8","text":"#include <stdio.h> struct Queue { int data [ 32 ]; int head , tail ; }; void push ( struct Queue * queue , int data ); void pop ( struct Queue * queue ); void show ( struct Queue * queue ); int main () { int ctrl ; scanf ( \"%d\" , & ctrl ); while ( ctrl -- ) { struct Queue queue = {}; int time ; scanf ( \"%d\" , & time ); while ( time -- ) { char operation [ 8 ]; scanf ( \"%s\" , operation ); if ( operation [ 1 ] == 'u' ) { int data ; scanf ( \"%d\" , & data ); push ( & queue , data ); } else { pop ( & queue ); } } show ( & queue ); } return 0 ; } void push ( struct Queue * queue , int data ) { queue -> data [ queue -> tail ] = data ; queue -> tail += 1 ; } void pop ( struct Queue * queue ) { queue -> head += 1 ; } void show ( struct Queue * queue ) { if ( queue -> head == queue -> tail ) { printf ( \"no eggs! \\n \" ); } else { printf ( \"%d\" , queue -> data [ queue -> head ]); for ( int i = queue -> head + 1 ; i != queue -> tail ; ++ i ) { printf ( \" %d\" , queue -> data [ i ]); } printf ( \" \\n \" ); } }","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/1/","text":"1 \u6982\u8ff0 Java\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u5957JDK\u5de5\u5177\uff0c\u5176\u4e2djava.exe\u662f\u6307\uff1a A. Java\u6587\u6863\u751f\u6210\u5668 B. Java\u89e3\u91ca\u5668 C. Java\u7f16\u8bd1\u5668 D. Java\u7c7b\u5206\u89e3\u5668 \u89e3\u51b3\u65b9\u6848 B Java\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a: A. JDK B. J2ME C. J2SE D. J2EE \u89e3\u51b3\u65b9\u6848 B","title":"1 \u6982\u8ff0"},{"location":"uooc/java/1/#1","text":"","title":"1 \u6982\u8ff0"},{"location":"uooc/java/1/#javajdkjavaexe","text":"A. Java\u6587\u6863\u751f\u6210\u5668 B. Java\u89e3\u91ca\u5668 C. Java\u7f16\u8bd1\u5668 D. Java\u7c7b\u5206\u89e3\u5668","title":"Java\u7a0b\u5e8f\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u7528\u5230\u4e00\u5957JDK\u5de5\u5177\uff0c\u5176\u4e2djava.exe\u662f\u6307\uff1a"},{"location":"uooc/java/1/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/1/#java","text":"A. JDK B. J2ME C. J2SE D. J2EE","title":"Java\u5d4c\u5165\u5f0f\u5e94\u7528\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a:"},{"location":"uooc/java/1/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/","text":"10.1 \u7ebf\u7a0b\u6982\u8ff0 \u5728java\u7a0b\u5e8f\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u7ebf\u7a0b\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002 A. run\u65b9\u6cd5\u662f\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e3b\u4f53 B. \u591a\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u65f6\u6267\u884c\u987a\u5e8f\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684 C. \u5982\u679crun\u65b9\u6cd5\u6267\u884c\u7ed3\u675f\u4e86\uff0c\u8bf4\u660e\u7ebf\u7a0b\u6b7b\u4ea1\u4e86 D. \u5728Java\u4e2d\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u53ef\u8fd0\u884c\u7ebf\u7a0b\u4f1a\u62a2\u5360\u4f4e\u4f18\u5148\u7ea7\u7ebf\u7a0b \u89e3\u51b3\u65b9\u6848 B 10.2 \u521b\u5efa\u7ebf\u7a0b Thread\u7c7b\u7528\u6765\u521b\u5efa\u548c\u63a7\u5236\u7ebf\u7a0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684\u54ea\u4e2a\u65b9\u6cd5\uff1f\uff08 \uff09 A. init() B. start() C. run() D. notifyAll() \u89e3\u51b3\u65b9\u6848 B 10.3 \u7ebf\u7a0b\u540c\u6b65\u673a\u5236 \u5f53\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u4f7f\u7528\uff08 \uff09\u5173\u952e\u5b57\u8fdb\u884c\u8d44\u6e90\u540c\u6b65\u3002 A. transient B. synchronized C. public D. static \u89e3\u51b3\u65b9\u6848 B \u6d4b\u9a8c \u7ed9Java\u7ebf\u7a0b\u8bbe\u5b9a\u4f18\u5148\u7ea7\u7684\u6210\u5458\u65b9\u6cd5\u662f\uff08 \uff09\u3002 A. getPriority() B. setPriority() C. getThread() D. setThread() \u89e3\u51b3\u65b9\u6848 B","title":"10 \u7ebf\u7a0b"},{"location":"uooc/java/10/#101","text":"","title":"10.1 \u7ebf\u7a0b\u6982\u8ff0"},{"location":"uooc/java/10/#java","text":"A. run\u65b9\u6cd5\u662f\u8fd0\u884c\u7ebf\u7a0b\u7684\u4e3b\u4f53 B. \u591a\u4e2a\u7ebf\u7a0b\u8fd0\u884c\u65f6\u6267\u884c\u987a\u5e8f\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684 C. \u5982\u679crun\u65b9\u6cd5\u6267\u884c\u7ed3\u675f\u4e86\uff0c\u8bf4\u660e\u7ebf\u7a0b\u6b7b\u4ea1\u4e86 D. \u5728Java\u4e2d\uff0c\u9ad8\u4f18\u5148\u7ea7\u7684\u53ef\u8fd0\u884c\u7ebf\u7a0b\u4f1a\u62a2\u5360\u4f4e\u4f18\u5148\u7ea7\u7ebf\u7a0b","title":"\u5728java\u7a0b\u5e8f\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u7ebf\u7a0b\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/10/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#102","text":"","title":"10.2 \u521b\u5efa\u7ebf\u7a0b"},{"location":"uooc/java/10/#thread","text":"A. init() B. start() C. run() D. notifyAll()","title":"Thread\u7c7b\u7528\u6765\u521b\u5efa\u548c\u63a7\u5236\u7ebf\u7a0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u5e94\u8be5\u4f7f\u7528\u4e0b\u9762\u7684\u54ea\u4e2a\u65b9\u6cd5\uff1f\uff08 \uff09"},{"location":"uooc/java/10/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#103","text":"","title":"10.3 \u7ebf\u7a0b\u540c\u6b65\u673a\u5236"},{"location":"uooc/java/10/#_3","text":"A. transient B. synchronized C. public D. static","title":"\u5f53\u591a\u4e2a\u7ebf\u7a0b\u5bf9\u8c61\u64cd\u4f5c\u540c\u4e00\u8d44\u6e90\u65f6\uff0c\u4f7f\u7528\uff08 \uff09\u5173\u952e\u5b57\u8fdb\u884c\u8d44\u6e90\u540c\u6b65\u3002"},{"location":"uooc/java/10/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/10/#_5","text":"","title":"\u6d4b\u9a8c"},{"location":"uooc/java/10/#java_1","text":"A. getPriority() B. setPriority() C. getThread() D. setThread()","title":"\u7ed9Java\u7ebf\u7a0b\u8bbe\u5b9a\u4f18\u5148\u7ea7\u7684\u6210\u5458\u65b9\u6cd5\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/10/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/","text":"11.1 \u7f51\u7edc\u5730\u5740 InetAddress\u7c7b\u4e2d\u7684\uff08 \uff09\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6b63\u5411\u540d\u79f0\u89e3\u6790\u3002 A. isReachable B. getHostAddress() C. getHostName() D. getByName() \u89e3\u51b3\u65b9\u6848 D 11.2 UDP\u6570\u636e\u62a5 \u4f7f\u7528UDP\u5957\u63a5\u5b57\u901a\u4fe1\u65f6\uff0c\u5e38\u7528\uff08 \uff09\u7c7b\u628a\u8981\u53d1\u9001\u7684\u4fe1\u606f\u6253\u5305\u3002 A. String B. DatagramSocket C. MulticastSocket D. DatagramPacket \u89e3\u51b3\u65b9\u6848 D 11.3 TCP\u8fde\u63a5 ServerSocket\u7684\u76d1\u542c\u65b9\u6cd5accept()\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\uff08 \uff09\u3002 A. void B. Object C. Socket D. DatagramPacket \u89e3\u51b3\u65b9\u6848 C","title":"11 Java\u7f51\u7edc\u7f16\u7a0b"},{"location":"uooc/java/11/#111","text":"","title":"11.1 \u7f51\u7edc\u5730\u5740"},{"location":"uooc/java/11/#inetaddress","text":"A. isReachable B. getHostAddress() C. getHostName() D. getByName()","title":"InetAddress\u7c7b\u4e2d\u7684\uff08 \uff09\u65b9\u6cd5\u53ef\u4ee5\u5b9e\u73b0\u6b63\u5411\u540d\u79f0\u89e3\u6790\u3002"},{"location":"uooc/java/11/#_1","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/#112-udp","text":"","title":"11.2 UDP\u6570\u636e\u62a5"},{"location":"uooc/java/11/#udp","text":"A. String B. DatagramSocket C. MulticastSocket D. DatagramPacket","title":"\u4f7f\u7528UDP\u5957\u63a5\u5b57\u901a\u4fe1\u65f6\uff0c\u5e38\u7528\uff08 \uff09\u7c7b\u628a\u8981\u53d1\u9001\u7684\u4fe1\u606f\u6253\u5305\u3002"},{"location":"uooc/java/11/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/11/#113-tcp","text":"","title":"11.3 TCP\u8fde\u63a5"},{"location":"uooc/java/11/#serversocketaccept","text":"A. void B. Object C. Socket D. DatagramPacket","title":"ServerSocket\u7684\u76d1\u542c\u65b9\u6cd5accept()\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/11/#_3","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/","text":"2.1\u6570\u636e\u7c7b\u578b \u4e0b\u5217\u6570\u7ec4\u5b9a\u4e49\u53ca\u8d4b\u503c\uff0c\u9519\u8bef\u7684\u662f\uff08 \uff09\u3002 A. int a[]={1,2,3}; B. int a[]; C. a=new int[3]; a[1]=1; a[2]=2; a[3]=3; D. int a[][]=new int[3][]; a[0]=new int[2]; a[1]=new int[2]; a[2]=new int[2]; \u89e3\u51b3\u65b9\u6848 C \u8d8a\u754c JAVA\u8bed\u8a00\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u662f\uff08 \uff09\u3002 A. ASCII B. EBCDIC C. Unicode D. BCD \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e2d\uff0c\u5fc5\u987b\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u662f\uff08 \uff09\u3002 A. byte->int; B. int->char; C. short->float; D. float->double; \u89e3\u51b3\u65b9\u6848 B \u4ee5\u4e0b\u6807\u8bc6\u7b26\u4e2d\uff08 \uff09\u662f\u4e0d\u5408\u6cd5\u7684\u3002 A. _small B. Big C. $12ab D. 7hello \u89e3\u51b3\u65b9\u6848 D \u4e0b\u9762\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\u6216\u8b66\u544a\u7684\u662f\uff08 \uff09\u3002 A. char a=\u2019abc\u2019 ; B. byte b=145; C. float c=3.14; D. int i=12; \u89e3\u51b3\u65b9\u6848 D \u5c0f\u6570\u9ed8\u8ba4double 2.2 \u63a7\u5236\u8bed\u53e5 \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0ci\u3001j\u7684\u503c\u662f\uff08 \uff09\u3002 int i = 0 , j = 10 ; do { if ( i ++>-- j ) break ;} while ( true ); A. i=6\uff0cj=4 B. i=6\uff0cj=5 C. i=5\uff0cj=5 D. i=5\uff0cj=4 \u89e3\u51b3\u65b9\u6848 A \u5f53\u4e0b\u9762\u7a0b\u5e8f\u8f93\u51fa\u201d\u7b2c2\u533a\u57df\u65f6\u201d\u65f6\uff0cx\u7684\u8303\u56f4\u4e3a\uff08 \uff09\u3002 if ( x <- 100 ){ System . out . println ( \u201c \u7b2c1\u533a\u57df \u201d );} else if ( x < 0 ){ System . out . println ( \u201c \u7b2c2\u533a\u57df \u201d );} else { System . out . println ( \u201c \u7b2c3\u533a\u57df \u201d );} A. x<=-100 B. x>-100 C. x<0 && x>=-100 D. x>=0 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff08 \uff09\u3002 int i ; for ( i = 0 ; i < 4 ; i ++){ switch ( i ){ case 1 : System . out . print ( \u201c 1 \u201d ); case 2 : System . out . print ( \u201c 2 \u201d ); break ; default : System . out . print ( \u201c 0 \u201d ); } } A. 12 B. 01220 C. 0120 D. 120 \u89e3\u51b3\u65b9\u6848 B JAVA\u8bed\u8a00\u4e2d\u63a7\u5236\u7ed3\u6784\u5305\u62ec\uff08 \uff09\u3002 A. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 B. \u987a\u5e8f\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 C. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784 D. \u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 \u89e3\u51b3\u65b9\u6848 A \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cc\u7684\u503c\u662f\uff08 \uff09\u3002 char c ; for ( c = 'z' ; c < 'a' ; c -= 4 ){ if ( c <= 'o' ) break ; } A. \u2018z\u2019 B. \u2018n\u2019 C. \u2018m\u2019 D. \u2018p\u2019 \u89e3\u51b3\u65b9\u6848 A \u5751\u9898 \u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cj\u7684\u503c\u662f\uff08 \uff09\u3002 int j = 0 , i = 3 ; while (-- i > 0 ) j += j -= i ; A. 0 B. 5 C. -5 D. -17 \u89e3\u51b3\u65b9\u6848 C 2.3 \u8fd0\u7b97\u7b26 \u6267\u884c\u4e0b\u9762\u7a0b\u5e8f\u540e\uff0c\u7ed3\u8bba\u6b63\u786e\u7684\u662f\uff08 \uff09\u3002 int x , y , z ; x = 1 ; y = 2 ; z =(++ x + y ++== 5 ? y + x --:-- y + x ); A. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a5 B. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a5 C. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a4 D. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a4 \u89e3\u51b3\u65b9\u6848 D \u82e5a\u662fint\u578b\u53d8\u91cf\uff0c\u8868\u8fbe\u5f0fa=(int)(25.8/3%3);\u6267\u884c\u540ea\u7684\u503c\u4e3a\uff08 \uff09\u3002 A. 1 B. 2 C. 3 D. 4 \u89e3\u51b3\u65b9\u6848 B \u8bbe\u5404\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\uff08 \uff09\u9009\u9879\u7684\u503c\u4e3atrue\u3002 int a = 1 , b = 1 ; boolean flag = a != b ++; A. a++==b; B. !(++a==b); C. (++a==b) || flag; D. (++a==b) && flag; \u89e3\u51b3\u65b9\u6848 C","title":"2 \u6570\u636e\u7c7b\u578b\u3001\u8fd0\u7b97\u7b26\u3001\u8868\u8fbe\u5f0f\u548c\u8df3\u8f6c\u8bed\u53e5"},{"location":"uooc/java/2/#21","text":"","title":"2.1\u6570\u636e\u7c7b\u578b"},{"location":"uooc/java/2/#_1","text":"A. int a[]={1,2,3}; B. int a[]; C. a=new int[3]; a[1]=1; a[2]=2; a[3]=3; D. int a[][]=new int[3][]; a[0]=new int[2]; a[1]=new int[2]; a[2]=new int[2];","title":"\u4e0b\u5217\u6570\u7ec4\u5b9a\u4e49\u53ca\u8d4b\u503c\uff0c\u9519\u8bef\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_2","text":"C \u8d8a\u754c","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#java","text":"A. ASCII B. EBCDIC C. Unicode D. BCD","title":"JAVA\u8bed\u8a00\u4f7f\u7528\u7684\u5b57\u7b26\u96c6\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_3","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_4","text":"A. byte->int; B. int->char; C. short->float; D. float->double;","title":"\u4e0b\u9762\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e2d\uff0c\u5fc5\u987b\u8fdb\u884c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_5","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_6","text":"A. _small B. Big C. $12ab D. 7hello","title":"\u4ee5\u4e0b\u6807\u8bc6\u7b26\u4e2d\uff08  \uff09\u662f\u4e0d\u5408\u6cd5\u7684\u3002"},{"location":"uooc/java/2/#_7","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_8","text":"A. char a=\u2019abc\u2019 ; B. byte b=145; C. float c=3.14; D. int i=12;","title":"\u4e0b\u9762\u8d4b\u503c\u8bed\u53e5\u4e0d\u4f1a\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\u6216\u8b66\u544a\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_9","text":"D \u5c0f\u6570\u9ed8\u8ba4double","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#22","text":"","title":"2.2 \u63a7\u5236\u8bed\u53e5"},{"location":"uooc/java/2/#ij","text":"int i = 0 , j = 10 ; do { if ( i ++>-- j ) break ;} while ( true ); A. i=6\uff0cj=4 B. i=6\uff0cj=5 C. i=5\uff0cj=5 D. i=5\uff0cj=4","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0ci\u3001j\u7684\u503c\u662f\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_10","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#2x","text":"if ( x <- 100 ){ System . out . println ( \u201c \u7b2c1\u533a\u57df \u201d );} else if ( x < 0 ){ System . out . println ( \u201c \u7b2c2\u533a\u57df \u201d );} else { System . out . println ( \u201c \u7b2c3\u533a\u57df \u201d );} A. x<=-100 B. x>-100 C. x<0 && x>=-100 D. x>=0","title":"\u5f53\u4e0b\u9762\u7a0b\u5e8f\u8f93\u51fa\u201d\u7b2c2\u533a\u57df\u65f6\u201d\u65f6\uff0cx\u7684\u8303\u56f4\u4e3a\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_11","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#_12","text":"int i ; for ( i = 0 ; i < 4 ; i ++){ switch ( i ){ case 1 : System . out . print ( \u201c 1 \u201d ); case 2 : System . out . print ( \u201c 2 \u201d ); break ; default : System . out . print ( \u201c 0 \u201d ); } } A. 12 B. 01220 C. 0120 D. 120","title":"\u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u4e3a\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#java_1","text":"A. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 B. \u987a\u5e8f\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784 C. \u987a\u5e8f\u7ed3\u6784\u3001\u9009\u62e9\u7ed3\u6784 D. \u9009\u62e9\u7ed3\u6784\u3001\u5faa\u73af\u7ed3\u6784","title":"JAVA\u8bed\u8a00\u4e2d\u63a7\u5236\u7ed3\u6784\u5305\u62ec\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_14","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#c","text":"char c ; for ( c = 'z' ; c < 'a' ; c -= 4 ){ if ( c <= 'o' ) break ; } A. \u2018z\u2019 B. \u2018n\u2019 C. \u2018m\u2019 D. \u2018p\u2019","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cc\u7684\u503c\u662f\uff08 \uff09\u3002"},{"location":"uooc/java/2/#_15","text":"A \u5751\u9898","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#j","text":"int j = 0 , i = 3 ; while (-- i > 0 ) j += j -= i ; A. 0 B. 5 C. -5 D. -17","title":"\u4e0b\u5217\u8bed\u53e5\u6267\u884c\u540e\uff0cj\u7684\u503c\u662f\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_16","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#23","text":"","title":"2.3 \u8fd0\u7b97\u7b26"},{"location":"uooc/java/2/#_17","text":"int x , y , z ; x = 1 ; y = 2 ; z =(++ x + y ++== 5 ? y + x --:-- y + x ); A. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a5 B. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a5 C. x\u7684\u503c\u4e3a1\uff0cy\u7684\u503c\u4e3a3\uff0cz\u7684\u503c\u4e3a4 D. x\u7684\u503c\u4e3a2\uff0cy\u7684\u503c\u4e3a2\uff0cz\u7684\u503c\u4e3a4","title":"\u6267\u884c\u4e0b\u9762\u7a0b\u5e8f\u540e\uff0c\u7ed3\u8bba\u6b63\u786e\u7684\u662f\uff08  \uff09\u3002"},{"location":"uooc/java/2/#_18","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#aintaint25833a","text":"A. 1 B. 2 C. 3 D. 4","title":"\u82e5a\u662fint\u578b\u53d8\u91cf\uff0c\u8868\u8fbe\u5f0fa=(int)(25.8/3%3);\u6267\u884c\u540ea\u7684\u503c\u4e3a\uff08   \uff09\u3002"},{"location":"uooc/java/2/#_19","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/2/#true","text":"int a = 1 , b = 1 ; boolean flag = a != b ++; A. a++==b; B. !(++a==b); C. (++a==b) || flag; D. (++a==b) && flag;","title":"\u8bbe\u5404\u4e2a\u53d8\u91cf\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\uff08   \uff09\u9009\u9879\u7684\u503c\u4e3atrue\u3002"},{"location":"uooc/java/2/#_20","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/","text":"3.2 \u7c7b\u7684\u57fa\u672c\u67b6\u6784\u4ecb\u7ecd \u4e0b\u5217\u54ea\u4e2a\u7c7b\u58f0\u660e\u662f\u6b63\u786e\u7684\uff1f A. abstract final class H1{} B. abstract private move(){} C. protected private number; D. public abstract class Car{} \u89e3\u51b3\u65b9\u6848 D \u4ee5\u4e0b\u9009\u9879\u7b26\u5408\u5bf9\u8c61\u548c\u7c7b\u7684\u5173\u7cfb\u7684\u662f\uff1a A. \u4eba\u548c\u8001\u864e B. \u4e66\u548c\u6c7d\u8f66 C. \u7236\u4eb2\u548c\u513f\u5b50 D. \u6c7d\u8f66\u548c\u4ea4\u901a\u5de5\u5177 \u89e3\u51b3\u65b9\u6848 D \u4e0b\u9762\u5173\u4e8ejava\u4e2d\u7c7b\u7684\u8bf4\u6cd5\u54ea\u4e2a\u662f\u4e0d\u6b63\u786e\u7684\uff1f A. \u7c7b\u4f53\u4e2d\u53ea\u80fd\u6709\u53d8\u91cf\u5b9a\u4e49\u3001\u5e38\u91cf\u5b9a\u4e49\u548c\u6210\u5458\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u4e0d\u80fd\u5305\u542b\u201cx=3;\u201d\u8fd9\u6837\u7684\u8bed\u53e5\u3002 B. \u6784\u9020\u51fd\u6570\u662f\u7c7b\u4e2d\u7684\u7279\u6b8a\u65b9\u6cd5 C. \u4e3b\u7c7b\u4e00\u5b9a\u8981\u58f0\u660e\u4e3apublic\u3002 D. \u4e00\u4e2ajava\u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2aclass\u5b9a\u4e49\u3002 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u54ea\u4e2a\u5355\u8bcd\u662fJava\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff1f A. Float B. this C. string D. unsigned \u89e3\u51b3\u65b9\u6848 B \u4e0b\u5217\u54ea\u9879\u662fJava\u7f16\u7a0b\u6240\u5fc5\u987b\u7684\u9ed8\u8ba4\u5f15\u7528\u5305\uff1f A. java.sys\u5305 B. java.lang\u5305 C. java.net\u5305\u3000 D. \u4ee5\u4e0a\u90fd\u4e0d\u662f \u89e3\u51b3\u65b9\u6848 B \u4ee5\u4e0b\u54ea\u4e2a\u662fJava\u7684\u5173\u952e\u5b57\uff1f A. NULL B. new C. instanceOf D. wend \u89e3\u51b3\u65b9\u6848 B \u4e0b\u9762\u54ea\u4e2a\u662fJava\u8bed\u8a00\u4e2d\u6b63\u786e\u7684\u6807\u8bc6\u7b26\uff1f A. 3com B. import C. that D. this \u89e3\u51b3\u65b9\u6848 C \u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\uff1f A. int\u578b B. String\u578b C. \u6570\u7ec4 D. \u4ee5\u4e0a\u90fd\u53ef\u4ee5 \u89e3\u51b3\u65b9\u6848 D \u5728Java\u4e2d\u51fd\u6570main()\u7684\u8fd4\u56de\u503c\u662f\uff1a A. String B. int C. char D. void \u89e3\u51b3\u65b9\u6848 D Java\u5e94\u7528\u5728\u6d88\u8d39\u7535\u5b50\u5e02\u573a\u4e0a\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a: A. JDK B. J2ME C. J2SE D. J2EE \u89e3\u51b3\u65b9\u6848 B 3.4 \u4f7f\u7528\u5bf9\u8c61 \u6784\u9020\u65b9\u6cd5\u4f55\u65f6\u88ab\u8c03\u7528\uff1f A. \u7c7b\u5b9a\u4e49\u65f6 B. \u521b\u5efa\u5bf9\u8c61\u65f6 C. \u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5\u65f6 D. \u4f7f\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u65f6 \u89e3\u51b3\u65b9\u6848 B \u5728\u7f16\u5199Java Application\u7a0b\u5e8f\u65f6\uff0c\u82e5\u9700\u8981\u4f7f\u7528\u5230\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u5fc5\u987b\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u5199\u4e0a\u4ee5\u4e0b\u54ea\u6761\u8bed\u53e5\uff1f A. import java.awt.*; B. import java.applet.Applet; C. import java.io.*; D. import java.awt.Graphis; \u89e3\u51b3\u65b9\u6848 C \u8ba4\u771f\u9605\u8bfb\u4ee3\u7801\uff0c\u9009\u62e9\u6b63\u786e\u7684\u9009\u9879 public class MyClass { public static void main ( String arguments []) { amethod ( arguments ); } public void amethod ( String [] arguments ) { System . out . println ( arguments ); } } A. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570 B. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0camethod\u65b9\u6cd5\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u5c1a\u672a\u521d\u59cb\u5316 C. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 D. \u8fd9\u6bb5\u4ee3\u7801\u662f\u6b63\u786e\u7684 \u89e3\u51b3\u65b9\u6848 C \u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u540c\u65f6\u5b9a\u4e49\u8bb8\u591a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5f62\u5f0f\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u987a\u5e8f\u5404\u4e0d\u76f8\u540c\uff0c\u4f20\u56de\u7684\u503c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u8fd9\u79cd\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u7279\u6027\u79f0\u4e3a\uff1a A. \u9690\u85cf B. \u8986\u76d6 C. \u91cd\u8f7d D. Java\u4e0d\u652f\u6301\u6b64\u7279\u6027 \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u5173\u4e8e\u6784\u9020\u51fd\u6570\u7684\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u662f\uff1a A. \u6784\u9020\u51fd\u6570\u4e5f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\u7ed9\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002 B. \u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u91cd\u8f7d\u3002 C. \u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u3002 D. \u6784\u9020\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u7c7b\u540d\u76f8\u540c \u89e3\u51b3\u65b9\u6848 B \u547d\u4ee4javac -verbose\u4e2d\u9009\u9879\u7684\u4f5c\u7528\u662f: A. \u663e\u793aJVM\u52a0\u8f7dclass\u7684\u8fc7\u7a0b B. \u663e\u793aJVM\u7684\u7248\u672c C. \u663e\u793aJVM\u8c03\u7528\u5185\u5b58\u7684\u60c5\u51b5 D. \u663e\u793aJVM\u7684\u9519\u8bef\u8ddf\u8e2a\u8fc7\u7a0b \u89e3\u51b3\u65b9\u6848 A \u7ed9\u51fa\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b: class Test { void test ( int i ){ System . out . println ( \"I am an int.\" ); } void test ( String s ){ System . out . println ( \"I am a string.\" ); } public static void main ( String args []) { Test t = new Test (); char ch = 'y' ; t . test ( ch ); } } \u4e0b\u5217\u54ea\u4e2a\u9009\u9879\u6b63\u786e\uff1f A. \u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7a7a\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6\u3002 B. \u547d\u4ee4\u884ct.test(ch); \u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6ca1\u6709\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 C. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am an int. D. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am a string. \u89e3\u51b3\u65b9\u6848 C \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f public class Sandys { private int court ; public static void main ( String argv []){ Sandys s = new Sandys ( 99 ); System . out . println ( s . court ); } Sandys ( int ballcount ){ court = ballcount ; } } A. \u7f16\u8bd1\u9519\u8bef\uff1athe variable court is defined as private B. \u7f16\u8bd1\u9519\u8bef\uff1as is not initialized when the System.out method is called C. \u7f16\u8bd1\u901a\u8fc7\uff0c\u6ca1\u6709\u8f93\u51fa D. \u7f16\u8bd1\u901a\u8fc7\uff0c\u8f93\u51fa99 \u89e3\u51b3\u65b9\u6848 D \u7f16\u8bd1Java Application\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5c06\u4ea7\u751f\u76f8\u5e94\u7684\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5b57\u8282\u7801\u6587\u4ef6\u7684\u6269\u5c55\u540d\u4e3a A. .java B. .class C. .html D. .exe \u89e3\u51b3\u65b9\u6848 B 3.6 \u7c7b\u65b9\u6cd5/\u53c2\u6570\u4f20\u9012 \u5173\u4e8estatic\u4fee\u9970\u7b26\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f A. \u88abstatic\u4fee\u9970\u7b26\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 B. \u5728\u65b9\u6cd5\u4e2d\u521b\u5efa\u7684static\u53d8\u91cf\uff0c\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u4e2d\u5bf9\u5b83\u7684\u503c\u505a\u7684\u4fee\u6539\u90fd\u4e0d\u80fd\u4fdd\u7559\u4e0b\u6765\u3002 C. \u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u8fd9\u4e2a\u7c7b\u7684static\u53d8\u91cf\u3002 D. static\u4fee\u9970\u7b26\u53ea\u80fd\u7528\u4e8e\u4fee\u9970\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u3002 \u89e3\u51b3\u65b9\u6848 C \u4ee5\u4e0b\u5bf9\u65b9\u6cd5\u5185\u7684\u53d8\u91cf\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1a A. \u4e00\u5b9a\u5728\u65b9\u6cd5\u5185\u6240\u6709\u4f4d\u7f6e\u53ef\u89c1 B. \u53ef\u80fd\u5728\u65b9\u6cd5\u5185\u5c40\u90e8\u53ef\u89c1 C. \u53ef\u4ee5\u5728\u65b9\u6cd5\u5916\u53ef\u89c1 D. \u65b9\u6cd5\u5916\u4e5f\u53ef\u7528 \u89e3\u51b3\u65b9\u6848 B \u7ed9\u51fa\u5982\u4e0b\u4ee3\u7801: class Test { private int m ; public static void fun () { // some code... \u3000\u3000 } } \u5982\u4f55\u4f7f\u6210\u5458\u53d8\u91cfm\u88ab\u51fd\u6570fun()\u76f4\u63a5\u8bbf\u95ee\uff1f A. \u5c06private int m \u6539\u4e3a protected int m B. \u5c06private int m \u6539\u4e3a public int m C. \u5c06private int m \u6539\u4e3a static int m D. \u5c06private int m \u6539\u4e3a int m \u89e3\u51b3\u65b9\u6848 C \u7c7bJOptionPane\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4ea7\u751f\u6807\u51c6\u5bf9\u8bdd\u6846\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u80fd\u591f\u7ed9\u7528\u6237\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\uff1a A. closeDialog() B. openDialog() C. showInputDialog() D. outputDialog() \u89e3\u51b3\u65b9\u6848 C \u8fd0\u884c\u4e0b\u5217\u7a0b\u5e8f\uff0c\u4f1a\u4ea7\u751f\u4ec0\u4e48\u7ed3\u679c\uff1a import java.io.* ; public class Outer1 { private int a ; void foo ( double d , final float f ){ String s ; final boolean b ; class Inner { void methodInner (){ System . out . println ( \"in the Inner\" ); } } } public static void main ( String args []) { Outer1 me = new Outer1 (); me . foo ( 123 , 123 ); System . out . println ( \"outer\" ); } } A. in the Inner outer B. outer C. in the Inner D. \u7f16\u8bd1\u4e0d\u901a\u8fc7 \u89e3\u51b3\u65b9\u6848 B \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f public class Ref { public static void main ( String argv []){ Ref r = new Ref (); r . amethod ( r ); } public void amethod ( Ref r ){ int i = 99 ; multi ( r ); System . out . println ( i ); } public void multi ( Ref r ){ r . i = r . i * 2 ; } } A. \u7f16\u8bd1\u9519\u8bef B. \u8f93\u51fa99 C. \u8f93\u51fa198 D. \u8fd0\u884c\u65f6\u51fa\u9519 \u89e3\u51b3\u65b9\u6848 A 3.8 \u8bbf\u95ee\u6743\u9650 this\u5173\u952e\u5b57\u6307\u7684\u662f\uff1f A. \u5f53\u524d\u5bf9\u8c61\u6307\u9488 B. \u5f53\u524d\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 C. \u5f53\u524d\u5bf9\u8c61\u5f15\u7528 D. \u5f53\u524d\u7c7b\u7684\u65b9\u6cd5 \u89e3\u51b3\u65b9\u6848 B \u5982\u679c\u7c7b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4ec5\u4ec5\u53ef\u4ee5\u88ab\u540c\u4e00\u5305\u4e2d\u5176\u4ed6\u7c7b\u8bbf\u95ee\uff0c\u5219\u4f7f\u7528\u5982\u4e0b\u54ea\u4e2a\u7ea6\u675f\u7b26? A. private B. public C. protected D. no modifier \u89e3\u51b3\u65b9\u6848 D \u5982\u679c\u4efb\u4f55\u5305\u4e2d\u7684\u5b50\u7c7b\u90fd\u80fd\u8bbf\u95ee\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\uff0c\u90a3\u4e48\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\u4f7f\u7528\u54ea\u4e2a\u9650\u5b9a\u8bcd\u6700\u597d\uff1f A. public B. private C. protected D. transient \u89e3\u51b3\u65b9\u6848 C \u4e0d\u5141\u8bb8\u4f5c\u4e3a\u7c7b\u53ca\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u7684\u662f: A. public B. private C. static D. protected \u89e3\u51b3\u65b9\u6848 C \u4e0b\u9762\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\u7684\u65b9\u6cd5\u53ea\u80fd\u88ab\u672c\u7c7b\u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528 A. protected B. static C. private D. public \u89e3\u51b3\u65b9\u6848 C \u67d0\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5b50\u7c7b\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u53e6\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\uff08\u542b\u5b50\u7c7b\uff09\u8bbf\u95ee\uff0c\u8be5\u5982\u4f55\u5b9a\u4e49\uff1f A. \u53d8\u91cf\u5e94\u8be5\u7528public\u505a\u4fee\u9970\u3002 B. \u53d8\u91cf\u5e94\u8be5\u7528private\u505a\u4fee\u9970\u3002 C. \u53d8\u91cf\u5e94\u8be5\u7528protected\u505a\u4fee\u9970\u3002 D. \u53d8\u91cf\u4e0d\u9700\u505a\u4efb\u4f55\u4fee\u9970\u3002 \u89e3\u51b3\u65b9\u6848 D \u5173\u4e8e\u88ab\u79c1\u6709\u8bbf\u95ee\u63a7\u5236\u7b26private\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff1a A. \u53ef\u4ee5\u88ab\u4e09\u79cd\u7c7b\u6240\u5f15\u7528\uff1a\u8be5\u7c7b\u81ea\u8eab\u3001\u4e0e\u5b83\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5176\u4ed6\u7c7b\u3001\u5728\u5176\u4ed6\u5305\u4e2d\u7684\u8be5\u7c7b\u7684\u5b50\u7c7b B. \u53ef\u4ee5\u88ab\u4e24\u79cd\u7c7b\u8bbf\u95ee\u548c\u5f15\u7528\uff1a\u8be5\u7c7b\u672c\u8eab\u3001\u8be5\u7c7b\u7684\u6240\u6709\u5b50\u7c7b C. \u53ea\u80fd\u88ab\u8be5\u7c7b\u81ea\u8eab\u6240\u8bbf\u95ee\u548c\u4fee\u6539 D. \u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u8bbf\u95ee \u89e3\u51b3\u65b9\u6848 C 3.9 \u5185\u90e8\u7c7b\u7b80\u4ecb \u8003\u8651\u7c7bA: public class A { public int x = 1 ; public void increaseBy ( int n ){ x = x + n ; } } \u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u4e0d\u4f1a\u8f93\u51fa4\uff1f A . A a = new A (); a . x = 3 + a . x ; System . out . print ( a . x ); B . A a = new A (); a . increaseBy ( 2 ); a . increaseBy ( 1 ); System . out . print ( a . x ); C . A a = new A (){ public void increaseBy ( int n ) { super . increaseBy ( n ); } }; a . increaseBy ( 4 ); System . out . print ( a . x ); D . A a = new A (); a . increaseBy ( 3 ); System . out . print ( a . x ); \u89e3\u51b3\u65b9\u6848 C 3.10 \u5305\u7684\u5e94\u7528 \u4ee5\u4e0b\u54ea\u51e0\u6bb5\u4ee3\u7801\u53ef\u4ee5\u6210\u529f\u7f16\u8bd1\uff1f 1 ) import java.awt.* ; package Mypackage ; class Myclass {} 2 ) package MyPackage ; import java.awt.* ; class MyClass {} 3 ) /*This is a comment */ package MyPackage ; import java.awt.* ; class MyClass {} A. 1\uff09\u548c2\uff09 B. 2\uff09\u548c3\uff09 C. 1\uff09\u548c3\uff09 D. 1\uff09\u30012\uff09\u548c3\uff09 \u89e3\u51b3\u65b9\u6848 B \u521b\u5efa\u4e00\u4e2a\u540d\u4e3aMyPackage\u5305\u7684\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff1a A. import MyPackage ; B. import package MyPackage ; C. package MyPackage ; D. package import MyPackage ; \u89e3\u51b3\u65b9\u6848 C","title":"3 \u7c7b\u548c\u5bf9\u8c61"},{"location":"uooc/java/3/#32","text":"","title":"3.2 \u7c7b\u7684\u57fa\u672c\u67b6\u6784\u4ecb\u7ecd"},{"location":"uooc/java/3/#_1","text":"A. abstract final class H1{} B. abstract private move(){} C. protected private number; D. public abstract class Car{}","title":"\u4e0b\u5217\u54ea\u4e2a\u7c7b\u58f0\u660e\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_3","text":"A. \u4eba\u548c\u8001\u864e B. \u4e66\u548c\u6c7d\u8f66 C. \u7236\u4eb2\u548c\u513f\u5b50 D. \u6c7d\u8f66\u548c\u4ea4\u901a\u5de5\u5177","title":"\u4ee5\u4e0b\u9009\u9879\u7b26\u5408\u5bf9\u8c61\u548c\u7c7b\u7684\u5173\u7cfb\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_4","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java","text":"A. \u7c7b\u4f53\u4e2d\u53ea\u80fd\u6709\u53d8\u91cf\u5b9a\u4e49\u3001\u5e38\u91cf\u5b9a\u4e49\u548c\u6210\u5458\u65b9\u6cd5\u7684\u5b9a\u4e49\uff0c\u4e0d\u80fd\u5305\u542b\u201cx=3;\u201d\u8fd9\u6837\u7684\u8bed\u53e5\u3002 B. \u6784\u9020\u51fd\u6570\u662f\u7c7b\u4e2d\u7684\u7279\u6b8a\u65b9\u6cd5 C. \u4e3b\u7c7b\u4e00\u5b9a\u8981\u58f0\u660e\u4e3apublic\u3002 D. \u4e00\u4e2ajava\u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2aclass\u5b9a\u4e49\u3002","title":"\u4e0b\u9762\u5173\u4e8ejava\u4e2d\u7c7b\u7684\u8bf4\u6cd5\u54ea\u4e2a\u662f\u4e0d\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_5","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_1","text":"A. Float B. this C. string D. unsigned","title":"\u4e0b\u9762\u54ea\u4e2a\u5355\u8bcd\u662fJava\u8bed\u8a00\u7684\u5173\u952e\u5b57\uff1f"},{"location":"uooc/java/3/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_2","text":"A. java.sys\u5305 B. java.lang\u5305 C. java.net\u5305\u3000 D. \u4ee5\u4e0a\u90fd\u4e0d\u662f","title":"\u4e0b\u5217\u54ea\u9879\u662fJava\u7f16\u7a0b\u6240\u5fc5\u987b\u7684\u9ed8\u8ba4\u5f15\u7528\u5305\uff1f"},{"location":"uooc/java/3/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_3","text":"A. NULL B. new C. instanceOf D. wend","title":"\u4ee5\u4e0b\u54ea\u4e2a\u662fJava\u7684\u5173\u952e\u5b57\uff1f"},{"location":"uooc/java/3/#_8","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_4","text":"A. 3com B. import C. that D. this","title":"\u4e0b\u9762\u54ea\u4e2a\u662fJava\u8bed\u8a00\u4e2d\u6b63\u786e\u7684\u6807\u8bc6\u7b26\uff1f"},{"location":"uooc/java/3/#_9","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_10","text":"A. int\u578b B. String\u578b C. \u6570\u7ec4 D. \u4ee5\u4e0a\u90fd\u53ef\u4ee5","title":"\u6570\u7ec4\u4e2d\u53ef\u4ee5\u5305\u542b\u4ec0\u4e48\u7c7b\u578b\u7684\u5143\u7d20\uff1f"},{"location":"uooc/java/3/#_11","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#javamain","text":"A. String B. int C. char D. void","title":"\u5728Java\u4e2d\u51fd\u6570main()\u7684\u8fd4\u56de\u503c\u662f\uff1a"},{"location":"uooc/java/3/#_12","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_5","text":"A. JDK B. J2ME C. J2SE D. J2EE","title":"Java\u5e94\u7528\u5728\u6d88\u8d39\u7535\u5b50\u5e02\u573a\u4e0a\u5f00\u53d1\u5e73\u53f0\u540d\u79f0\u4e3a:"},{"location":"uooc/java/3/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#34","text":"","title":"3.4 \u4f7f\u7528\u5bf9\u8c61"},{"location":"uooc/java/3/#_14","text":"A. \u7c7b\u5b9a\u4e49\u65f6 B. \u521b\u5efa\u5bf9\u8c61\u65f6 C. \u8c03\u7528\u5bf9\u8c61\u65b9\u6cd5\u65f6 D. \u4f7f\u7528\u5bf9\u8c61\u7684\u53d8\u91cf\u65f6","title":"\u6784\u9020\u65b9\u6cd5\u4f55\u65f6\u88ab\u8c03\u7528\uff1f"},{"location":"uooc/java/3/#_15","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java-application","text":"A. import java.awt.*; B. import java.applet.Applet; C. import java.io.*; D. import java.awt.Graphis;","title":"\u5728\u7f16\u5199Java Application\u7a0b\u5e8f\u65f6\uff0c\u82e5\u9700\u8981\u4f7f\u7528\u5230\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u8bed\u53e5\uff0c\u5fc5\u987b\u5728\u7a0b\u5e8f\u7684\u5f00\u5934\u5199\u4e0a\u4ee5\u4e0b\u54ea\u6761\u8bed\u53e5\uff1f"},{"location":"uooc/java/3/#_16","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_17","text":"public class MyClass { public static void main ( String arguments []) { amethod ( arguments ); } public void amethod ( String [] arguments ) { System . out . println ( arguments ); } } A. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u63a5\u53d7\u5b57\u7b26\u4e32\u53c2\u6570 B. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0camethod\u65b9\u6cd5\u4e2d\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\u5c1a\u672a\u521d\u59cb\u5316 C. \u8fd9\u6bb5\u4ee3\u7801\u662f\u9519\u8bef\u7684\uff0cmain\u65b9\u6cd5\u4e0d\u80fd\u8c03\u7528\u5b9e\u4f8b\u65b9\u6cd5 D. \u8fd9\u6bb5\u4ee3\u7801\u662f\u6b63\u786e\u7684","title":"\u8ba4\u771f\u9605\u8bfb\u4ee3\u7801\uff0c\u9009\u62e9\u6b63\u786e\u7684\u9009\u9879"},{"location":"uooc/java/3/#_18","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java_6","text":"A. \u9690\u85cf B. \u8986\u76d6 C. \u91cd\u8f7d D. Java\u4e0d\u652f\u6301\u6b64\u7279\u6027","title":"\u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u540c\u65f6\u5b9a\u4e49\u8bb8\u591a\u540c\u540d\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e9b\u65b9\u6cd5\u7684\u5f62\u5f0f\u53c2\u6570\u7684\u4e2a\u6570\u3001\u7c7b\u578b\u6216\u987a\u5e8f\u5404\u4e0d\u76f8\u540c\uff0c\u4f20\u56de\u7684\u503c\u4e5f\u53ef\u4ee5\u4e0d\u76f8\u540c\u3002\u8fd9\u79cd\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u7279\u6027\u79f0\u4e3a\uff1a"},{"location":"uooc/java/3/#_19","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_20","text":"A. \u6784\u9020\u51fd\u6570\u4e5f\u5c5e\u4e8e\u7c7b\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u65f6\u5019\u7ed9\u6210\u5458\u53d8\u91cf\u8d4b\u503c\u3002 B. \u6784\u9020\u51fd\u6570\u4e0d\u53ef\u4ee5\u91cd\u8f7d\u3002 C. \u6784\u9020\u51fd\u6570\u6ca1\u6709\u8fd4\u56de\u503c\u3002 D. \u6784\u9020\u51fd\u6570\u4e00\u5b9a\u8981\u548c\u7c7b\u540d\u76f8\u540c","title":"\u4e0b\u9762\u5173\u4e8e\u6784\u9020\u51fd\u6570\u7684\u8bf4\u6cd5\u4e0d\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_21","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#javac-verbose","text":"A. \u663e\u793aJVM\u52a0\u8f7dclass\u7684\u8fc7\u7a0b B. \u663e\u793aJVM\u7684\u7248\u672c C. \u663e\u793aJVM\u8c03\u7528\u5185\u5b58\u7684\u60c5\u51b5 D. \u663e\u793aJVM\u7684\u9519\u8bef\u8ddf\u8e2a\u8fc7\u7a0b","title":"\u547d\u4ee4javac  -verbose\u4e2d\u9009\u9879\u7684\u4f5c\u7528\u662f:"},{"location":"uooc/java/3/#_22","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_23","text":"class Test { void test ( int i ){ System . out . println ( \"I am an int.\" ); } void test ( String s ){ System . out . println ( \"I am a string.\" ); } public static void main ( String args []) { Test t = new Test (); char ch = 'y' ; t . test ( ch ); } }","title":"\u7ed9\u51fa\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b:"},{"location":"uooc/java/3/#_24","text":"A. \u7a0b\u5e8f\u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u7a7a\u7684\u65b9\u6cd5\u4e0d\u80fd\u88ab\u8986\u76d6\u3002 B. \u547d\u4ee4\u884ct.test(ch); \u5c06\u4e0d\u4f1a\u7f16\u8bd1\uff0c\u56e0\u4e3a\u6ca1\u6709\u5bf9\u5e94\u7684\u65b9\u6cd5\u3002 C. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am an int. D. \u4ee3\u7801\u5c06\u7f16\u8bd1\u5e76\u8f93\u51fa\u4ee5\u4e0b\u7ed3\u679c\uff1a I am a string.","title":"\u4e0b\u5217\u54ea\u4e2a\u9009\u9879\u6b63\u786e\uff1f"},{"location":"uooc/java/3/#_25","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_26","text":"public class Sandys { private int court ; public static void main ( String argv []){ Sandys s = new Sandys ( 99 ); System . out . println ( s . court ); } Sandys ( int ballcount ){ court = ballcount ; } } A. \u7f16\u8bd1\u9519\u8bef\uff1athe variable court is defined as private B. \u7f16\u8bd1\u9519\u8bef\uff1as is not initialized when the System.out method is called C. \u7f16\u8bd1\u901a\u8fc7\uff0c\u6ca1\u6709\u8f93\u51fa D. \u7f16\u8bd1\u901a\u8fc7\uff0c\u8f93\u51fa99","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_27","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#java-application_1","text":"A. .java B. .class C. .html D. .exe","title":"\u7f16\u8bd1Java Application\u6e90\u7a0b\u5e8f\u6587\u4ef6\u5c06\u4ea7\u751f\u76f8\u5e94\u7684\u5b57\u8282\u7801\u6587\u4ef6\uff0c\u8fd9\u4e9b\u5b57\u8282\u7801\u6587\u4ef6\u7684\u6269\u5c55\u540d\u4e3a"},{"location":"uooc/java/3/#_28","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#36","text":"","title":"3.6 \u7c7b\u65b9\u6cd5/\u53c2\u6570\u4f20\u9012"},{"location":"uooc/java/3/#static","text":"A. \u88abstatic\u4fee\u9970\u7b26\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 B. \u5728\u65b9\u6cd5\u4e2d\u521b\u5efa\u7684static\u53d8\u91cf\uff0c\u6bcf\u6b21\u65b9\u6cd5\u8c03\u7528\u4e2d\u5bf9\u5b83\u7684\u503c\u505a\u7684\u4fee\u6539\u90fd\u4e0d\u80fd\u4fdd\u7559\u4e0b\u6765\u3002 C. \u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u7c7b\u5bf9\u8c61\u5171\u4eab\u8fd9\u4e2a\u7c7b\u7684static\u53d8\u91cf\u3002 D. static\u4fee\u9970\u7b26\u53ea\u80fd\u7528\u4e8e\u4fee\u9970\u57fa\u672c\u7c7b\u578b\u53d8\u91cf\u3002","title":"\u5173\u4e8estatic\u4fee\u9970\u7b26\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_29","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_30","text":"A. \u4e00\u5b9a\u5728\u65b9\u6cd5\u5185\u6240\u6709\u4f4d\u7f6e\u53ef\u89c1 B. \u53ef\u80fd\u5728\u65b9\u6cd5\u5185\u5c40\u90e8\u53ef\u89c1 C. \u53ef\u4ee5\u5728\u65b9\u6cd5\u5916\u53ef\u89c1 D. \u65b9\u6cd5\u5916\u4e5f\u53ef\u7528","title":"\u4ee5\u4e0b\u5bf9\u65b9\u6cd5\u5185\u7684\u53d8\u91cf\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_31","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_32","text":"class Test { private int m ; public static void fun () { // some code... \u3000\u3000 } }","title":"\u7ed9\u51fa\u5982\u4e0b\u4ee3\u7801:"},{"location":"uooc/java/3/#mfun","text":"A. \u5c06private int m \u6539\u4e3a protected int m B. \u5c06private int m \u6539\u4e3a public int m C. \u5c06private int m \u6539\u4e3a static int m D. \u5c06private int m \u6539\u4e3a int m","title":"\u5982\u4f55\u4f7f\u6210\u5458\u53d8\u91cfm\u88ab\u51fd\u6570fun()\u76f4\u63a5\u8bbf\u95ee\uff1f"},{"location":"uooc/java/3/#_33","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#joptionpane","text":"A. closeDialog() B. openDialog() C. showInputDialog() D. outputDialog()","title":"\u7c7bJOptionPane\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4ea7\u751f\u6807\u51c6\u5bf9\u8bdd\u6846\u7684\u65b9\u6cd5\uff0c\u5b83\u4eec\u80fd\u591f\u7ed9\u7528\u6237\u63d0\u4f9b\u6709\u7528\u7684\u4fe1\u606f\uff0c\u5176\u4e2d\u5305\u62ec\uff1a"},{"location":"uooc/java/3/#_34","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_35","text":"import java.io.* ; public class Outer1 { private int a ; void foo ( double d , final float f ){ String s ; final boolean b ; class Inner { void methodInner (){ System . out . println ( \"in the Inner\" ); } } } public static void main ( String args []) { Outer1 me = new Outer1 (); me . foo ( 123 , 123 ); System . out . println ( \"outer\" ); } } A. in the Inner outer B. outer C. in the Inner D. \u7f16\u8bd1\u4e0d\u901a\u8fc7","title":"\u8fd0\u884c\u4e0b\u5217\u7a0b\u5e8f\uff0c\u4f1a\u4ea7\u751f\u4ec0\u4e48\u7ed3\u679c\uff1a"},{"location":"uooc/java/3/#_36","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_37","text":"public class Ref { public static void main ( String argv []){ Ref r = new Ref (); r . amethod ( r ); } public void amethod ( Ref r ){ int i = 99 ; multi ( r ); System . out . println ( i ); } public void multi ( Ref r ){ r . i = r . i * 2 ; } } A. \u7f16\u8bd1\u9519\u8bef B. \u8f93\u51fa99 C. \u8f93\u51fa198 D. \u8fd0\u884c\u65f6\u51fa\u9519","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/3/#_38","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#38","text":"","title":"3.8 \u8bbf\u95ee\u6743\u9650"},{"location":"uooc/java/3/#this","text":"A. \u5f53\u524d\u5bf9\u8c61\u6307\u9488 B. \u5f53\u524d\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61 C. \u5f53\u524d\u5bf9\u8c61\u5f15\u7528 D. \u5f53\u524d\u7c7b\u7684\u65b9\u6cd5","title":"this\u5173\u952e\u5b57\u6307\u7684\u662f\uff1f"},{"location":"uooc/java/3/#_39","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_40","text":"A. private B. public C. protected D. no modifier","title":"\u5982\u679c\u7c7b\u4e2d\u7684\u6210\u5458\u53d8\u91cf\u4ec5\u4ec5\u53ef\u4ee5\u88ab\u540c\u4e00\u5305\u4e2d\u5176\u4ed6\u7c7b\u8bbf\u95ee\uff0c\u5219\u4f7f\u7528\u5982\u4e0b\u54ea\u4e2a\u7ea6\u675f\u7b26?"},{"location":"uooc/java/3/#_41","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_42","text":"A. public B. private C. protected D. transient","title":"\u5982\u679c\u4efb\u4f55\u5305\u4e2d\u7684\u5b50\u7c7b\u90fd\u80fd\u8bbf\u95ee\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\uff0c\u90a3\u4e48\u8d85\u7c7b\u4e2d\u7684\u6210\u5458\u4f7f\u7528\u54ea\u4e2a\u9650\u5b9a\u8bcd\u6700\u597d\uff1f"},{"location":"uooc/java/3/#_43","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_44","text":"A. public B. private C. static D. protected","title":"\u4e0d\u5141\u8bb8\u4f5c\u4e3a\u7c7b\u53ca\u7c7b\u6210\u5458\u7684\u8bbf\u95ee\u63a7\u5236\u7b26\u7684\u662f:"},{"location":"uooc/java/3/#_45","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_46","text":"A. protected B. static C. private D. public","title":"\u4e0b\u9762\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\u7684\u65b9\u6cd5\u53ea\u80fd\u88ab\u672c\u7c7b\u4e2d\u7684\u5176\u4ed6\u65b9\u6cd5\u4f7f\u7528"},{"location":"uooc/java/3/#_47","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#_48","text":"A. \u53d8\u91cf\u5e94\u8be5\u7528public\u505a\u4fee\u9970\u3002 B. \u53d8\u91cf\u5e94\u8be5\u7528private\u505a\u4fee\u9970\u3002 C. \u53d8\u91cf\u5e94\u8be5\u7528protected\u505a\u4fee\u9970\u3002 D. \u53d8\u91cf\u4e0d\u9700\u505a\u4efb\u4f55\u4fee\u9970\u3002","title":"\u67d0\u4e2a\u7c7b\u7684\u6210\u5458\u53d8\u91cf\u53ef\u4ee5\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5b50\u7c7b\u8bbf\u95ee\uff0c\u4f46\u4e0d\u80fd\u88ab\u53e6\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\uff08\u542b\u5b50\u7c7b\uff09\u8bbf\u95ee\uff0c\u8be5\u5982\u4f55\u5b9a\u4e49\uff1f"},{"location":"uooc/java/3/#_49","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#private","text":"A. \u53ef\u4ee5\u88ab\u4e09\u79cd\u7c7b\u6240\u5f15\u7528\uff1a\u8be5\u7c7b\u81ea\u8eab\u3001\u4e0e\u5b83\u5728\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u5176\u4ed6\u7c7b\u3001\u5728\u5176\u4ed6\u5305\u4e2d\u7684\u8be5\u7c7b\u7684\u5b50\u7c7b B. \u53ef\u4ee5\u88ab\u4e24\u79cd\u7c7b\u8bbf\u95ee\u548c\u5f15\u7528\uff1a\u8be5\u7c7b\u672c\u8eab\u3001\u8be5\u7c7b\u7684\u6240\u6709\u5b50\u7c7b C. \u53ea\u80fd\u88ab\u8be5\u7c7b\u81ea\u8eab\u6240\u8bbf\u95ee\u548c\u4fee\u6539 D. \u53ea\u80fd\u88ab\u540c\u4e00\u4e2a\u5305\u4e2d\u7684\u7c7b\u8bbf\u95ee","title":"\u5173\u4e8e\u88ab\u79c1\u6709\u8bbf\u95ee\u63a7\u5236\u7b26private\u4fee\u9970\u7684\u6210\u5458\u53d8\u91cf\uff0c\u4ee5\u4e0b\u8bf4\u6cd5\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_50","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#39","text":"","title":"3.9 \u5185\u90e8\u7c7b\u7b80\u4ecb"},{"location":"uooc/java/3/#a","text":"public class A { public int x = 1 ; public void increaseBy ( int n ){ x = x + n ; } }","title":"\u8003\u8651\u7c7bA:"},{"location":"uooc/java/3/#4","text":"A . A a = new A (); a . x = 3 + a . x ; System . out . print ( a . x ); B . A a = new A (); a . increaseBy ( 2 ); a . increaseBy ( 1 ); System . out . print ( a . x ); C . A a = new A (){ public void increaseBy ( int n ) { super . increaseBy ( n ); } }; a . increaseBy ( 4 ); System . out . print ( a . x ); D . A a = new A (); a . increaseBy ( 3 ); System . out . print ( a . x );","title":"\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u7a0b\u5e8f\u4ee3\u7801\u6bb5\u4e0d\u4f1a\u8f93\u51fa4\uff1f"},{"location":"uooc/java/3/#_51","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#310","text":"","title":"3.10 \u5305\u7684\u5e94\u7528"},{"location":"uooc/java/3/#_52","text":"1 ) import java.awt.* ; package Mypackage ; class Myclass {} 2 ) package MyPackage ; import java.awt.* ; class MyClass {} 3 ) /*This is a comment */ package MyPackage ; import java.awt.* ; class MyClass {} A. 1\uff09\u548c2\uff09 B. 2\uff09\u548c3\uff09 C. 1\uff09\u548c3\uff09 D. 1\uff09\u30012\uff09\u548c3\uff09","title":"\u4ee5\u4e0b\u54ea\u51e0\u6bb5\u4ee3\u7801\u53ef\u4ee5\u6210\u529f\u7f16\u8bd1\uff1f"},{"location":"uooc/java/3/#_53","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/3/#mypackage","text":"A. import MyPackage ; B. import package MyPackage ; C. package MyPackage ; D. package import MyPackage ;","title":"\u521b\u5efa\u4e00\u4e2a\u540d\u4e3aMyPackage\u5305\u7684\u8bed\u53e5\u6b63\u786e\u7684\u662f\uff1a"},{"location":"uooc/java/3/#_54","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/","text":"4.1 \u7ee7\u627f\u6982\u5ff5 \u4e0b\u5217\u5173\u4e8e\u7ee7\u627f\u7684\u54ea\u9879\u53d9\u8ff0\u662f\u6b63\u786e\u7684\uff1f A. \u5728java\u4e2d\u5141\u8bb8\u591a\u91cd\u7ee7\u627f B. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 C. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u540c\u65f6\u7ee7\u627f\u4e00\u4e2a\u7c7b\u548c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 D. java\u7684\u5355\u4e00\u7ee7\u627f\u4f7f\u4ee3\u7801\u66f4\u53ef\u9760 \u89e3\u51b3\u65b9\u6848 D \u7ed9\u51fa\u4e0b\u9762\u4ee3\u7801\uff1a 1 ) class Parent { 2 ) private String name ; 3 ) public Parent (){} 4 ) } 5 ) public class Child extends Parent { 6 ) private String department ; 7 ) public Child () {} 8 ) public String getValue () { return name ; } 9 ) public static void main ( String arg []) { 10 ) Parent p = new Parent (); 11 ) } 12 ) } \u54ea\u4e9b\u4ee3\u7801\u884c\u5c06\u5f15\u8d77\u9519\u8bef\uff1f A. \u7b2c3\u884c B. \u7b2c6\u884c C. \u7b2c7\u884c D. \u7b2c8\u884c \u89e3\u51b3\u65b9\u6848 D \u8bbe\u6709\u4e0b\u9762\u4e24\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff1a class Person { class Student extends Person { long id ; // \u8eab\u4efd\u8bc1\u53f7 int score ; // \u5165\u5b66\u603b\u5206 String name ; // \u59d3\u540d int getScore (){ return score ; } } } \u7c7bPerson\u548c\u7c7bStudent\u7684\u5173\u7cfb\u662f\uff1a A. \u5305\u542b\u5173\u7cfb B. \u7ee7\u627f\u5173\u7cfb\uff08\u5185\u90e8\u7c7b\u7ee7\u627f\u4e86\u5916\u90e8\u7c7b\uff09 C. \u5173\u8054\u5173\u7cfb D. \u65e0\u5173\u7cfb\uff0c\u4e0a\u8ff0\u7c7b\u5b9a\u4e49\u6709\u8bed\u6cd5\u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u6784\u9020\u65b9\u6cd5\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4ece\u7236\u7c7b\u90a3\u91cc\u7ee7\u627f\u6765\u7684\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u4e14\u5141\u8bb8\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.2 \u6210\u5458\u53d8\u91cf/\u65b9\u6cd5 \u770b\u4e0b\u9762\u4e00\u6bb5\u7a0b\u5e8f\uff1a class Aclass { void go (){ System . out . println ( \"Aclass\" ); } } public class Bclass extends Aclass { void go (){ System . out . println ( \"Bclass\" ); } public static void main ( String args []){ Aclass a = new Aclass (); Aclass a1 = new Bclass (); a . go (); a1 . go (); } } \u4ee5\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f\uff1a A. Aclass Aclass B. Bclass Bclass C. Aclass Bclass D. Bclass Aclass \u89e3\u51b3\u65b9\u6848 C \u5728Java\u4e2d\uff0c\u4ee5\u4e0b\u5173\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1f A. \u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u7684\u91cd\u5b9a\u4e49\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c B. \u65b9\u6cd5\u91cd\u8f7d\u51fa\u73b0\u5728\u7236\u5b50\u5173\u7cfb\u4e2d\uff0c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u662f\u5728\u540c\u4e00\u7c7b\u4e2d C. \u65b9\u6cd5\u91cd\u8f7d\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\uff0c\u53c2\u6570\u9879\u5fc5\u987b\u4e0d\u540c D. \u65b9\u6cd5\u91cd\u5b9a\u4e49\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u6216\u76f8\u5bb9\u3002 \u89e3\u51b3\u65b9\u6848 D \u65b9\u6cd5\u7684\u8986\u76d6\u662f\u5728\u5b50\u7c7b\u4e2d\u518d\u6b21\u5b9e\u73b0\u7236\u7c7b\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u8fc7\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u53ef\u4ee5\u7528final\u8bf4\u660e\u53d8\u91cf\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u88abfinal\u4fee\u9970\u7b26\u4fee\u9970\u7684\u7c7b\uff0c\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u6700\u7ec8\u7c7b\u4e0d\u80fd\u6d3e\u751f\u5b50\u7c7b\uff0c\u4f46\u6700\u7ec8\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.3 super\u5173\u952e\u5b57 \u5982\u679c\u5b50\u7c7b\u8981\u521d\u59cb\u5316\u7236\u7c7b\u7684\u7c7b\u53d8\u91cf\uff0c\u8c03\u7528super\u8bed\u53e5\u5fc5\u987b\uff1a A. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u7b2c\u4e00\u6761\u8bed\u53e5 B. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u4efb\u4f55\u4f4d\u7f6e C. \u53ef\u4ee5\u91c7\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u6267\u884c D. \u53ef\u4ee5\u8c03\u7528this\u5173\u952e\u5b57 \u89e3\u51b3\u65b9\u6848 A this\u548csuper\u90fd\u53ef\u4ee5\u5728main()\u65b9\u6cd5\u4e2d\u4f7f\u7528 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.4 \u4e0a\u8f6c\u578b\u5bf9\u8c61 \u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u7c7b: public class UpByOne { private int num = 0 ; public int getNum () { return num ; } public void setNum ( int x ) { num = x ; } public void up () { num = num + 1 ; } } class UpByTwo extends UpByOne { public void up () { // missing code goes here } } \u5728\u7c7bUpByTwo\u4e2d,\u91cd\u5b9a\u4e49\u65b9\u6cd5\u65b9\u6cd5up()\uff0c\u4f7f\u5f97num\u52a02\uff0c\u4ee5\u4e0b\u54ea\u6bb5\u4ee3\u7801\u6700\u5408\u9002\u586b\u8865\u7701\u6389\u7684\u4ee3\u7801\uff1f A. num = num + 2; B. super.up(); super.up(); C. setNum(getNum()) + 2; D. super.up() + 1; \u89e3\u51b3\u65b9\u6848 B \u5047\u8bbe\u7c7bBaseWidget\u662f\u7c7bTypeAWidget\u7684\u7236\u7c7b\uff0c\u5e76\u4e14\u5728\u7c7bTypeAWidget\u4e2d\u91cd\u5199\u4e86\u65b9\u6cd5speak()\uff0c\u90a3\u4e48\u4e0b\u5217\u54ea\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u6b63\u786e\u7f16\u8bd1\u6267\u884c\uff1f A. Object A=new BaseWidget(); A.speak(); B. BaseWidget B=new TypeAWidget(); B.speak(); C. TypeAWidget C=new BaseWidget(); D. speak(); \u89e3\u51b3\u65b9\u6848 B \u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u57fa\u7c7b\u88ab\u8986\u76d6\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u65b0\u7684\u65b9\u6cd5\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B Java\u8bed\u8a00\u91cc\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u4e5f\u5373\u662f\u6240\u8c13\u7684\u7236\u7c7b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u800c\u5df2 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B Java\u4e0d\u5141\u8bb8\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u91cd\u65b0\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.5 \u62bd\u8c61\u7c7b \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f abstract class MineBase { abstract void amethod (); static int i ; } public class Mine extends MineBase { public static void main ( String argv []){ int [] ar = new int [ 5 ]; for ( i = 0 ; i < ar . length ; i ++) System . out . println ( ar [ i ]); } } A. \u7a0b\u5e8f\u6b63\u786e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5e76\u4e14\u8f93\u51fa\u5305\u542b5\u4e2a0\u7684\u5e8f\u5217 B. Error: ar is used before it is initialized C. Error Mine must be declared abstract D. IndexOutOfBoundes Error \u89e3\u51b3\u65b9\u6848 C \u542b\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u62bd\u8c61\u7c7b\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u88ab\u7ee7\u627f\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u5fc5\u987b\u662f\u62bd\u8c61\u7684\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 4.6 \u63a5\u53e3 interface\u53ef\u4ee5\u88ab\u4ee5\u4e0b\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\uff1f A. private B. class C. public D. static \u89e3\u51b3\u65b9\u6848 C \u5173\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\uff0c\u4ee5\u4e0b\u63cf\u8ff0\u6b63\u786e\u7684\u662f: A. \u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u53ea\u6709\u5b9e\u73b0 B. \u63a5\u53e3\u4e2d\u7684\u53d8\u91cf\u9ed8\u8ba4\u662fpublic\u3001final\u548cstatic\u7684 C. \u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u7531\u591a\u4e2a\u7c7b\u6765\u5b9e\u73b0\uff0c\u5219\u8fd9\u4e9b\u7c7b\u5728\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u65f6\u91c7\u7528\u7edf\u4e00\u7684\u4ee3\u7801 D. \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4f46\u65b9\u6cd5\u53ef\u4e0d\u4e3apublic \u89e3\u51b3\u65b9\u6848 B \u5173\u4e8e\u63a5\u53e3\u4e0b\u9762\u4e0d\u6b63\u786e\u7684\u8bf4\u6cd5\u662f\uff1a A. \u63a5\u53e3\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f B. \u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u662f\u62bd\u8c61\u7684 C. \u63a5\u53e3\u91cc\u7684\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u5747\u4e3apublic D. \u5b9e\u73b0\u63a5\u53e3\u7684\u5173\u952e\u5b57\u662fimplements \u89e3\u51b3\u65b9\u6848 A \u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u5355\u4e2a\u7236\u7c7b\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u63a5\u53e3\u4e0d\u80fd\u58f0\u660e\u6784\u9020\u51fd\u6570\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 4.7 \u63a5\u53e3\u56de\u8c03 \u7ed9\u5b9a\u4ee5\u4e0b\u7a0b\u5e8f\u7247\u6bb5\uff0c\u7ed3\u679c\u4e3a\uff1f interface InterfaceA { String s = \"Hello\" ; void f (); } class ClassA implements InterfaceA { public void f (){ System . out . print ( s ); } } class ClassB { void g ( InterfaceA a ){ a . f (); } } public class E { public static void main ( String [] args ) { ClassB b = new ClassB (); b . g ( new ClassA ()); } } A. Hello B. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c C. \u7f16\u8bd1\u9519\u8bef\uff1ab.g(new ClassA()) D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 A \u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\uff0c\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a interface B { void f (); } class A implements B { public void f (){ System . out . println ( \"I love java\uff01\" ); } public static void main ( String [] args ) { B b = new A (); b . f (); } } A. \u6267\u884c\u9519\u8bef B. I love java\uff01 C. \u7f16\u8bd1\u9519\u8bef D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 B \u7ed9\u51fa\u5982\u4e0b\u7a0b\u5e8f\uff1a interface InterfaceA { String s = \"good \" ; void f (); } abstract class ClassA { abstract void g (); } class ClassB extends ClassA implements InterfaceA { void g (){ System . out . print ( s ); } public void f (){ System . out . print ( \" \" + s ); } } public class E { public static void main ( String [] args ) { ClassA a = new ClassB (); InterfaceA b = new ClassB (); a . g (); b . f (); } } \u5176\u8fd0\u884c\u7ed3\u679c\u662f\uff1f A. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c B. \u7f16\u8bd1\u9519\u8bef\uff1aInterfaceA b=new ClassB(); C. good good D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9 \u89e3\u51b3\u65b9\u6848 C","title":"4 \u7ee7\u627f\u4e0e\u63a5\u53e3"},{"location":"uooc/java/4/#41","text":"","title":"4.1 \u7ee7\u627f\u6982\u5ff5"},{"location":"uooc/java/4/#_1","text":"A. \u5728java\u4e2d\u5141\u8bb8\u591a\u91cd\u7ee7\u627f B. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 C. \u5728java\u4e2d\u4e00\u4e2a\u7c7b\u4e0d\u80fd\u540c\u65f6\u7ee7\u627f\u4e00\u4e2a\u7c7b\u548c\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3 D. java\u7684\u5355\u4e00\u7ee7\u627f\u4f7f\u4ee3\u7801\u66f4\u53ef\u9760","title":"\u4e0b\u5217\u5173\u4e8e\u7ee7\u627f\u7684\u54ea\u9879\u53d9\u8ff0\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/4/#_2","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_3","text":"1 ) class Parent { 2 ) private String name ; 3 ) public Parent (){} 4 ) } 5 ) public class Child extends Parent { 6 ) private String department ; 7 ) public Child () {} 8 ) public String getValue () { return name ; } 9 ) public static void main ( String arg []) { 10 ) Parent p = new Parent (); 11 ) } 12 ) }","title":"\u7ed9\u51fa\u4e0b\u9762\u4ee3\u7801\uff1a"},{"location":"uooc/java/4/#_4","text":"A. \u7b2c3\u884c B. \u7b2c6\u884c C. \u7b2c7\u884c D. \u7b2c8\u884c","title":"\u54ea\u4e9b\u4ee3\u7801\u884c\u5c06\u5f15\u8d77\u9519\u8bef\uff1f"},{"location":"uooc/java/4/#_5","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_6","text":"class Person { class Student extends Person { long id ; // \u8eab\u4efd\u8bc1\u53f7 int score ; // \u5165\u5b66\u603b\u5206 String name ; // \u59d3\u540d int getScore (){ return score ; } } }","title":"\u8bbe\u6709\u4e0b\u9762\u4e24\u4e2a\u7c7b\u7684\u5b9a\u4e49\uff1a"},{"location":"uooc/java/4/#personstudent","text":"A. \u5305\u542b\u5173\u7cfb B. \u7ee7\u627f\u5173\u7cfb\uff08\u5185\u90e8\u7c7b\u7ee7\u627f\u4e86\u5916\u90e8\u7c7b\uff09 C. \u5173\u8054\u5173\u7cfb D. \u65e0\u5173\u7cfb\uff0c\u4e0a\u8ff0\u7c7b\u5b9a\u4e49\u6709\u8bed\u6cd5\u9519\u8bef","title":"\u7c7bPerson\u548c\u7c7bStudent\u7684\u5173\u7cfb\u662f\uff1a"},{"location":"uooc/java/4/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_8","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u6784\u9020\u65b9\u6cd5\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_9","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_10","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u4ece\u7236\u7c7b\u90a3\u91cc\u7ee7\u627f\u6765\u7684\u540c\u540d\u65b9\u6cd5\uff0c\u800c\u4e14\u5141\u8bb8\u5b83\u4eec\u6709\u4e0d\u540c\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u3002"},{"location":"uooc/java/4/#_11","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#42","text":"","title":"4.2 \u6210\u5458\u53d8\u91cf/\u65b9\u6cd5"},{"location":"uooc/java/4/#_12","text":"class Aclass { void go (){ System . out . println ( \"Aclass\" ); } } public class Bclass extends Aclass { void go (){ System . out . println ( \"Bclass\" ); } public static void main ( String args []){ Aclass a = new Aclass (); Aclass a1 = new Bclass (); a . go (); a1 . go (); } }","title":"\u770b\u4e0b\u9762\u4e00\u6bb5\u7a0b\u5e8f\uff1a"},{"location":"uooc/java/4/#_13","text":"A. Aclass Aclass B. Bclass Bclass C. Aclass Bclass D. Bclass Aclass","title":"\u4ee5\u4e0a\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/4/#_14","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java","text":"A. \u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u7684\u91cd\u5b9a\u4e49\u5b9e\u73b0\u7684\u529f\u80fd\u76f8\u540c B. \u65b9\u6cd5\u91cd\u8f7d\u51fa\u73b0\u5728\u7236\u5b50\u5173\u7cfb\u4e2d\uff0c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u662f\u5728\u540c\u4e00\u7c7b\u4e2d C. \u65b9\u6cd5\u91cd\u8f7d\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u4e00\u81f4\uff0c\u53c2\u6570\u9879\u5fc5\u987b\u4e0d\u540c D. \u65b9\u6cd5\u91cd\u5b9a\u4e49\u7684\u8fd4\u56de\u503c\u7c7b\u578b\u5fc5\u987b\u76f8\u540c\u6216\u76f8\u5bb9\u3002","title":"\u5728Java\u4e2d\uff0c\u4ee5\u4e0b\u5173\u4e8e\u65b9\u6cd5\u91cd\u8f7d\u548c\u65b9\u6cd5\u91cd\u5b9a\u4e49\u63cf\u8ff0\u6b63\u786e\u7684\u662f\uff1f"},{"location":"uooc/java/4/#_15","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_16","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u65b9\u6cd5\u7684\u8986\u76d6\u662f\u5728\u5b50\u7c7b\u4e2d\u518d\u6b21\u5b9e\u73b0\u7236\u7c7b\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u8fc7\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_17","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#final","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u53ef\u4ee5\u7528final\u8bf4\u660e\u53d8\u91cf\u4e3a\u4e00\u4e2a\u5e38\u91cf\u3002"},{"location":"uooc/java/4/#_18","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#final_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u88abfinal\u4fee\u9970\u7b26\u4fee\u9970\u7684\u7c7b\uff0c\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_19","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_20","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u6700\u7ec8\u7c7b\u4e0d\u80fd\u6d3e\u751f\u5b50\u7c7b\uff0c\u4f46\u6700\u7ec8\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002"},{"location":"uooc/java/4/#_21","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#43-super","text":"","title":"4.3 super\u5173\u952e\u5b57"},{"location":"uooc/java/4/#super","text":"A. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u7b2c\u4e00\u6761\u8bed\u53e5 B. \u653e\u5728\u5b50\u7c7b\u6784\u9020\u65b9\u6cd5\u4efb\u4f55\u4f4d\u7f6e C. \u53ef\u4ee5\u91c7\u7528\u521d\u59cb\u5316\u5217\u8868\u65b9\u5f0f\u6267\u884c D. \u53ef\u4ee5\u8c03\u7528this\u5173\u952e\u5b57","title":"\u5982\u679c\u5b50\u7c7b\u8981\u521d\u59cb\u5316\u7236\u7c7b\u7684\u7c7b\u53d8\u91cf\uff0c\u8c03\u7528super\u8bed\u53e5\u5fc5\u987b\uff1a"},{"location":"uooc/java/4/#_22","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#thissupermain","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"this\u548csuper\u90fd\u53ef\u4ee5\u5728main()\u65b9\u6cd5\u4e2d\u4f7f\u7528"},{"location":"uooc/java/4/#_23","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#44","text":"","title":"4.4 \u4e0a\u8f6c\u578b\u5bf9\u8c61"},{"location":"uooc/java/4/#_24","text":"public class UpByOne { private int num = 0 ; public int getNum () { return num ; } public void setNum ( int x ) { num = x ; } public void up () { num = num + 1 ; } } class UpByTwo extends UpByOne { public void up () { // missing code goes here } }","title":"\u8003\u8651\u4ee5\u4e0b\u4e24\u4e2a\u7c7b:"},{"location":"uooc/java/4/#upbytwoupnum2","text":"A. num = num + 2; B. super.up(); super.up(); C. setNum(getNum()) + 2; D. super.up() + 1;","title":"\u5728\u7c7bUpByTwo\u4e2d,\u91cd\u5b9a\u4e49\u65b9\u6cd5\u65b9\u6cd5up()\uff0c\u4f7f\u5f97num\u52a02\uff0c\u4ee5\u4e0b\u54ea\u6bb5\u4ee3\u7801\u6700\u5408\u9002\u586b\u8865\u7701\u6389\u7684\u4ee3\u7801\uff1f"},{"location":"uooc/java/4/#_25","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#basewidgettypeawidgettypeawidgetspeak","text":"A. Object A=new BaseWidget(); A.speak(); B. BaseWidget B=new TypeAWidget(); B.speak(); C. TypeAWidget C=new BaseWidget(); D. speak();","title":"\u5047\u8bbe\u7c7bBaseWidget\u662f\u7c7bTypeAWidget\u7684\u7236\u7c7b\uff0c\u5e76\u4e14\u5728\u7c7bTypeAWidget\u4e2d\u91cd\u5199\u4e86\u65b9\u6cd5speak()\uff0c\u90a3\u4e48\u4e0b\u5217\u54ea\u4e2a\u7a0b\u5e8f\u7247\u6bb5\u80fd\u6b63\u786e\u7f16\u8bd1\u6267\u884c\uff1f"},{"location":"uooc/java/4/#_26","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_27","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u57fa\u7c7b\u88ab\u8986\u76d6\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_28","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_29","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e0a\u8f6c\u578b\u5bf9\u8c61\u53ef\u4ee5\u8c03\u7528\u5b50\u7c7b\u4e2d\u65b0\u7684\u65b9\u6cd5\u3002"},{"location":"uooc/java/4/#_30","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"Java\u8bed\u8a00\u91cc\u7684\u4e0a\u8f6c\u578b\u5bf9\u8c61\u4e5f\u5373\u662f\u6240\u8c13\u7684\u7236\u7c7b\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u800c\u5df2"},{"location":"uooc/java/4/#_31","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#java_2","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"Java\u4e0d\u5141\u8bb8\u4e0a\u8f6c\u578b\u5bf9\u8c61\u518d\u91cd\u65b0\u7ed9\u5b50\u7c7b\u5bf9\u8c61\u8d4b\u503c\u3002"},{"location":"uooc/java/4/#_32","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#45","text":"","title":"4.5 \u62bd\u8c61\u7c7b"},{"location":"uooc/java/4/#_33","text":"abstract class MineBase { abstract void amethod (); static int i ; } public class Mine extends MineBase { public static void main ( String argv []){ int [] ar = new int [ 5 ]; for ( i = 0 ; i < ar . length ; i ++) System . out . println ( ar [ i ]); } } A. \u7a0b\u5e8f\u6b63\u786e\uff0c\u6ca1\u6709\u62a5\u9519\uff0c\u5e76\u4e14\u8f93\u51fa\u5305\u542b5\u4e2a0\u7684\u5e8f\u5217 B. Error: ar is used before it is initialized C. Error Mine must be declared abstract D. IndexOutOfBoundes Error","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/4/#_34","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_35","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u542b\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u58f0\u660e\u4e3a\u62bd\u8c61\u7c7b\u3002"},{"location":"uooc/java/4/#_36","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_37","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u62bd\u8c61\u7c7b\u53ef\u4ee5\u7528\u6765\u5b9a\u4e49\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u88ab\u7ee7\u627f\u3002"},{"location":"uooc/java/4/#_38","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_39","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u62bd\u8c61\u7c7b\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\u90fd\u5fc5\u987b\u662f\u62bd\u8c61\u7684\u3002"},{"location":"uooc/java/4/#_40","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#46","text":"","title":"4.6 \u63a5\u53e3"},{"location":"uooc/java/4/#interface","text":"A. private B. class C. public D. static","title":"interface\u53ef\u4ee5\u88ab\u4ee5\u4e0b\u54ea\u4e2a\u4fee\u9970\u7b26\u4fee\u9970\uff1f"},{"location":"uooc/java/4/#_41","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_42","text":"A. \u63a5\u53e3\u5b9a\u4e49\u7684\u65b9\u6cd5\u53ea\u6709\u5b9e\u73b0 B. \u63a5\u53e3\u4e2d\u7684\u53d8\u91cf\u9ed8\u8ba4\u662fpublic\u3001final\u548cstatic\u7684 C. \u5982\u679c\u4e00\u4e2a\u63a5\u53e3\u7531\u591a\u4e2a\u7c7b\u6765\u5b9e\u73b0\uff0c\u5219\u8fd9\u4e9b\u7c7b\u5728\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u65b9\u6cd5\u65f6\u91c7\u7528\u7edf\u4e00\u7684\u4ee3\u7801 D. \u5982\u679c\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u8be5\u63a5\u53e3\u4e2d\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4f46\u65b9\u6cd5\u53ef\u4e0d\u4e3apublic","title":"\u5173\u4e8e\u63a5\u53e3\u7684\u5b9a\u4e49\u548c\u5b9e\u73b0\uff0c\u4ee5\u4e0b\u63cf\u8ff0\u6b63\u786e\u7684\u662f:"},{"location":"uooc/java/4/#_43","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_44","text":"A. \u63a5\u53e3\u4e0d\u652f\u6301\u591a\u91cd\u7ee7\u627f B. \u63a5\u53e3\u6240\u6709\u65b9\u6cd5\u662f\u62bd\u8c61\u7684 C. \u63a5\u53e3\u91cc\u7684\u65b9\u6cd5\u8bbf\u95ee\u5c5e\u6027\u5747\u4e3apublic D. \u5b9e\u73b0\u63a5\u53e3\u7684\u5173\u952e\u5b57\u662fimplements","title":"\u5173\u4e8e\u63a5\u53e3\u4e0b\u9762\u4e0d\u6b63\u786e\u7684\u8bf4\u6cd5\u662f\uff1a"},{"location":"uooc/java/4/#_45","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_46","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u5355\u4e2a\u7236\u7c7b\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\u3002"},{"location":"uooc/java/4/#_47","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_48","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u63a5\u53e3\u4e0d\u80fd\u58f0\u660e\u6784\u9020\u51fd\u6570\u3002"},{"location":"uooc/java/4/#_49","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#47","text":"","title":"4.7 \u63a5\u53e3\u56de\u8c03"},{"location":"uooc/java/4/#_50","text":"interface InterfaceA { String s = \"Hello\" ; void f (); } class ClassA implements InterfaceA { public void f (){ System . out . print ( s ); } } class ClassB { void g ( InterfaceA a ){ a . f (); } } public class E { public static void main ( String [] args ) { ClassB b = new ClassB (); b . g ( new ClassA ()); } } A. Hello B. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c C. \u7f16\u8bd1\u9519\u8bef\uff1ab.g(new ClassA()) D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u7ed9\u5b9a\u4ee5\u4e0b\u7a0b\u5e8f\u7247\u6bb5\uff0c\u7ed3\u679c\u4e3a\uff1f"},{"location":"uooc/java/4/#_51","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_52","text":"interface B { void f (); } class A implements B { public void f (){ System . out . println ( \"I love java\uff01\" ); } public static void main ( String [] args ) { B b = new A (); b . f (); } } A. \u6267\u884c\u9519\u8bef B. I love java\uff01 C. \u7f16\u8bd1\u9519\u8bef D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u7ed9\u5b9a\u5982\u4e0b\u7a0b\u5e8f\uff0c\u8fd0\u884c\u7ed3\u679c\u4e3a\uff1a"},{"location":"uooc/java/4/#_53","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/4/#_54","text":"interface InterfaceA { String s = \"good \" ; void f (); } abstract class ClassA { abstract void g (); } class ClassB extends ClassA implements InterfaceA { void g (){ System . out . print ( s ); } public void f (){ System . out . print ( \" \" + s ); } } public class E { public static void main ( String [] args ) { ClassA a = new ClassB (); InterfaceA b = new ClassB (); a . g (); b . f (); } }","title":"\u7ed9\u51fa\u5982\u4e0b\u7a0b\u5e8f\uff1a"},{"location":"uooc/java/4/#_55","text":"A. \u7f16\u8bd1\u6b63\u786e\uff0c\u4f46\u65e0\u8fd0\u884c\u7ed3\u679c B. \u7f16\u8bd1\u9519\u8bef\uff1aInterfaceA b=new ClassB(); C. good good D. \u4ee5\u4e0a\u90fd\u4e0d\u5bf9","title":"\u5176\u8fd0\u884c\u7ed3\u679c\u662f\uff1f"},{"location":"uooc/java/4/#_56","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/","text":"5.1 String\u7c7b \u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f String s = new String ( \"Bicycle\" ); int iBegin = 1 ; char iEnd = 3 ; System . out . println ( s . substring ( iBegin , iEnd )); A. \u8f93\u51faBic B. \u8f93\u51faic C. \u8f93\u51faicy D. \u7f16\u8bd1\u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u4e0b\u9762\u54ea\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32String\u7684\u6b63\u786e\u5b9a\u4e49 A. String s1=null; B. String s2='null'; C. String s3=(String)'abc'; D. String s4=(String)'\\uface'; \u89e3\u51b3\u65b9\u6848 A \u5b57\u7b26\u4e32s = \u201dJava\u201d\uff0c\u627e\u51fa\u5b57\u6bcdv\u5728\u5b57\u7b26\u4e32s\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f A. mid(2,s); B. charAt(2); C. indexOf(s); D. s.indexOf('v'); \u89e3\u51b3\u65b9\u6848 D \u7ed9\u51fa\u4ee5\u4e0b\u53d8\u91cf\u5b9a\u4e49\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1f String s1 = new String ( \"Hello\" ); String s2 = new String ( \"there\" ); String s3 = new String (); A. s3=s1 + s2; B. s3=s1 - s2; C. s3=s1 & s2; D. s3=s1 && s2; \u89e3\u51b3\u65b9\u6848 A \u4ee5\u4e0b\u54ea\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f A. length() B. compareto() C. indexOf() D. touppercase() \u89e3\u51b3\u65b9\u6848 A 5.2 StringBuilder\u7c7b StringBuilder\u7c7b\u4e2d\u7684\u65b9\u6cd5capacity()\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684 A. \u957f\u5ea6 B. \u5bb9\u91cf C. \u5b57\u8282\u6570 D. \u5b57\u7b26\u4e32\u7684\u4e2a\u6570 \u89e3\u51b3\u65b9\u6848 B String\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7String\u5bf9\u8c61\u7684\u65b9\u6cd5replace(char oldChar, char newChar)\u4fee\u6539\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u5982\u679c\u8981\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u9891\u7e41\u4fee\u6539\uff0c\u5efa\u8bae\u4f7f\u7528StringBuilder\u7c7b\u800c\u975eString\u7c7b\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 5.3 StringBuffer\u7c7b StringBuffer\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A StringBuilder\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B StringBuffer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A","title":"5 \u5b57\u7b26\u4e32\u53ca\u5176\u5e94\u7528"},{"location":"uooc/java/5/#51-string","text":"","title":"5.1 String\u7c7b"},{"location":"uooc/java/5/#_1","text":"String s = new String ( \"Bicycle\" ); int iBegin = 1 ; char iEnd = 3 ; System . out . println ( s . substring ( iBegin , iEnd )); A. \u8f93\u51faBic B. \u8f93\u51faic C. \u8f93\u51faicy D. \u7f16\u8bd1\u9519\u8bef","title":"\u7f16\u8bd1\u53ca\u8fd0\u884c\u4ee5\u4e0b\u4ee3\u7801\uff0c\u4e0b\u5217\u9009\u9879\u54ea\u4e2a\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#string","text":"A. String s1=null; B. String s2='null'; C. String s3=(String)'abc'; D. String s4=(String)'\\uface';","title":"\u4e0b\u9762\u54ea\u4e2a\u662f\u5bf9\u5b57\u7b26\u4e32String\u7684\u6b63\u786e\u5b9a\u4e49"},{"location":"uooc/java/5/#_3","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#s-javavs","text":"A. mid(2,s); B. charAt(2); C. indexOf(s); D. s.indexOf('v');","title":"\u5b57\u7b26\u4e32s = \u201dJava\u201d\uff0c\u627e\u51fa\u5b57\u6bcdv\u5728\u5b57\u7b26\u4e32s\u4e2d\u7684\u4f4d\u7f6e\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u9009\u9879\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_4","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#_5","text":"String s1 = new String ( \"Hello\" ); String s2 = new String ( \"there\" ); String s3 = new String (); A. s3=s1 + s2; B. s3=s1 - s2; C. s3=s1 & s2; D. s3=s1 && s2;","title":"\u7ed9\u51fa\u4ee5\u4e0b\u53d8\u91cf\u5b9a\u4e49\uff0c\u4ee5\u4e0b\u54ea\u4e2a\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/5/#_6","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#_7","text":"A. length() B. compareto() C. indexOf() D. touppercase()","title":"\u4ee5\u4e0b\u54ea\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u8fd4\u56de\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff1f"},{"location":"uooc/java/5/#_8","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#52-stringbuilder","text":"","title":"5.2 StringBuilder\u7c7b"},{"location":"uooc/java/5/#stringbuildercapacity","text":"A. \u957f\u5ea6 B. \u5bb9\u91cf C. \u5b57\u8282\u6570 D. \u5b57\u7b26\u4e32\u7684\u4e2a\u6570","title":"StringBuilder\u7c7b\u4e2d\u7684\u65b9\u6cd5capacity()\u8fd4\u56de\u7684\u662f\u5b57\u7b26\u4e32\u7684"},{"location":"uooc/java/5/#_9","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringstringreplacechar-oldchar-char-newchar","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"String\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u901a\u8fc7String\u5bf9\u8c61\u7684\u65b9\u6cd5replace(char oldChar, char newChar)\u4fee\u6539\u3002"},{"location":"uooc/java/5/#_10","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuilderstring","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5982\u679c\u8981\u5bf9\u5b57\u7b26\u4e32\u5185\u5bb9\u9891\u7e41\u4fee\u6539\uff0c\u5efa\u8bae\u4f7f\u7528StringBuilder\u7c7b\u800c\u975eString\u7c7b\u3002"},{"location":"uooc/java/5/#_11","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#53-stringbuffer","text":"","title":"5.3 StringBuffer\u7c7b"},{"location":"uooc/java/5/#stringbuffer","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuffer\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u53ef\u4ee5\u88ab\u4fee\u6539\u3002"},{"location":"uooc/java/5/#_12","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuilder","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuilder\u662f\u7ebf\u7a0b\u5b89\u5168\u7684"},{"location":"uooc/java/5/#_13","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/5/#stringbuffer_1","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"StringBuffer\u662f\u7ebf\u7a0b\u5b89\u5168\u7684"},{"location":"uooc/java/5/#_14","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/","text":"6.1\u6cdb\u578b \u5df2\u77e5\u6709\u6cdb\u578b\u7c7bBox \uff0c\u4e0b\u9762\u54ea\u4e9b\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1a A. Box box; B. Box box = null; C. Box box; D. Box box = null; \u89e3\u51b3\u65b9\u6848 CD \u6cdb\u578b\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a class Box < T >{ ... } \u5c16\u62ec\u53f7\u5185\u7684\u7c7b\u578b\u53c2\u6570\u4e2a\u6570\u53ea\u80fd\u662f\u4e00\u4e2a\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 6.2 Collection\u96c6\u5408\u7c7b \u4e0b\u9762\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a HashSet myset = new HashSet (); myset . add ( new String ( \"Java\" )); //\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 myset . add ( \"Java\" ); //\u518d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 System . out . println ( myset . size ()); A. 0 B. 1 C. 2 D. \u9519\u8bef\uff0c\u65e0\u6cd5\u8fd0\u884c \u89e3\u51b3\u65b9\u6848 B \u91cd\u590d\u5143\u7d20 \u4e0b\u9762\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u662f\uff1a ArrayList < String > mylist = new ArrayList < String >(); mylist . add ( \"Java\" ); mylist . add ( \"\u662f\u597d\u8bed\u8a00\" ); mylist . add ( \"\uff01\" ); System . out . println ( mylist . size ()); A. 0 B. 1 C. 2 D. 3 \u89e3\u51b3\u65b9\u6848 D","title":"6 \u6cdb\u578b\u4e0e\u96c6\u5408"},{"location":"uooc/java/6/#61","text":"","title":"6.1\u6cdb\u578b"},{"location":"uooc/java/6/#box","text":"A. Box box; B. Box box = null; C. Box box; D. Box box = null;","title":"\u5df2\u77e5\u6709\u6cdb\u578b\u7c7bBox\uff0c\u4e0b\u9762\u54ea\u4e9b\u8bed\u53e5\u662f\u6b63\u786e\u7684\uff1a"},{"location":"uooc/java/6/#_1","text":"CD","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#_2","text":"class Box < T >{ ... }","title":"\u6cdb\u578b\u7c7b\u7684\u5b9a\u4e49\u5982\u4e0b\u6240\u793a\uff1a"},{"location":"uooc/java/6/#_3","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5c16\u62ec\u53f7\u5185\u7684\u7c7b\u578b\u53c2\u6570\u4e2a\u6570\u53ea\u80fd\u662f\u4e00\u4e2a\u3002"},{"location":"uooc/java/6/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#62-collection","text":"","title":"6.2 Collection\u96c6\u5408\u7c7b"},{"location":"uooc/java/6/#_5","text":"HashSet myset = new HashSet (); myset . add ( new String ( \"Java\" )); //\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 myset . add ( \"Java\" ); //\u518d\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 System . out . println ( myset . size ()); A. 0 B. 1 C. 2 D. \u9519\u8bef\uff0c\u65e0\u6cd5\u8fd0\u884c","title":"\u4e0b\u9762\u4ee3\u7801\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/6/#_6","text":"B \u91cd\u590d\u5143\u7d20","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/6/#_7","text":"ArrayList < String > mylist = new ArrayList < String >(); mylist . add ( \"Java\" ); mylist . add ( \"\u662f\u597d\u8bed\u8a00\" ); mylist . add ( \"\uff01\" ); System . out . println ( mylist . size ()); A. 0 B. 1 C. 2 D. 3","title":"\u4e0b\u9762\u4ee3\u7801\u7684\u8f93\u51fa\u7ed3\u679c\u662f\uff1a"},{"location":"uooc/java/6/#_8","text":"D","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/","text":"7.1 \u5904\u7406\u5f02\u5e38 \u5f53\u65b9\u6cd5\u9047\u5230\u5f02\u5e38\u53c8\u4e0d\u77e5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4e0b\u5217\u54ea\u79cd\u8bf4\u6cd5\u662f\u6b63\u786e\u7684\uff1f A. \u6355\u83b7\u5f02\u5e38 B. \u629b\u51fa\u5f02\u5e38 C. \u58f0\u660e\u5f02\u5e38 D. \u5d4c\u5957\u5f02\u5e38 \u89e3\u51b3\u65b9\u6848 B \u8bf7\u95ee\u6240\u6709\u7684\u5f02\u5e38\u7c7b\u7686\u7ee7\u627f\u54ea\u4e00\u4e2a\u7c7b\uff1f A. java.io.Exception B. java.lang.Throwable C. java.lang.Exception D. java.lang.Error \u89e3\u51b3\u65b9\u6848 B \u5f02\u5e38\u662f\u7a0b\u5e8f\u9519\u8bef\u6216\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u9519\u8bef\u7684\u4e0d\u6b63\u5e38\u72b6\u6001\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A \u5f53\u4e00\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u7ec8\u6b62\uff0c\u4f46\u662f\u6574\u4e2a\u7a0b\u5e8f\u4e0d\u4e00\u5b9a\u7ec8\u6b62\u8fd0\u884c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 A 7.2 \u4f8b\u5916\u5904\u7406\u673a\u5236 \u7f16\u8bd1java\u7a0b\u5e8f\u65f6\u51fa\u73b0error: cannot read: aaa.java\uff0c\u5219\u4e0b\u5217\u539f\u56e0\u6700\u6b63\u786e\u7684\u662f\uff1f A. \u539f\u56e0\u662f\u6267\u884c\u7684\u5f53\u524d\u76ee\u5f55\u4e0b\u6ca1\u6709\u627e\u5230aaa.java\u6587\u4ef6 B. \u539f\u56e0\u662f\u6ca1\u6709\u5b89\u88c5JDK\u5f00\u53d1\u73af\u5883\u3002 C. \u539f\u56e0\u662fjava\u6e90\u6587\u4ef6\u540d\u540e\u7f00\u4e00\u5b9a\u662f\u4ee5 .txt \u7ed3\u5c3e\u3002 D. \u539f\u56e0\u662fJDK\u5b89\u88c5\u540e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfPATH\u548cClasspath \u3002 \u89e3\u51b3\u65b9\u6848 A \u4e0b\u5217\u5e38\u89c1\u7684\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38\u4e2d\uff0c\u54ea\u4e00\u4e2a\u662f\u8f93\u5165\u3001\u8f93\u51fa\u5f02\u5e38\uff1f A. ClassNotFoundException B. IOException C. InterruptedException D. UnknownHostException \u89e3\u51b3\u65b9\u6848 B \u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\uff1f A. transient B. finally C. throw D. static \u89e3\u51b3\u65b9\u6848 C \u4f8b\u5916\u5904\u7406\u8fc7\u7a0b\u4e2d\u5bf9\u4e8ecatch\u5b50\u53e5\u7684\u6392\u5217\uff0c\u4e0b\u5217\u54ea\u79cd\u662f\u6b63\u786e\u7684\uff1f A. \u7236\u7c7b\u5728\u5148\uff0c\u5b50\u7c7b\u5728\u540e B. \u5b50\u7c7b\u5728\u5148\uff0c\u7236\u7c7b\u5728\u540e C. \u6709\u7ee7\u627f\u5173\u7cfb\u7684\u5f02\u5e38\u4e0d\u80fd\u5728\u540c\u4e00\u4e2atry\u7a0b\u5e8f\u6bb5\u5185 D. \u5148\u6709\u5b50\u7c7b\uff0c\u5176\u4ed6\u5982\u4f55\u6392\u5217\u90fd\u65e0\u5173 \u89e3\u51b3\u65b9\u6848 B throws\u7684\u4f5c\u7528\u662f\uff1a A. \u6ca1\u6709\u610f\u4e49 B. \u8868\u793a\u540e\u9762\u662f\u65b9\u6cd5\u7684\u8f93\u51fa\u503c C. \u8868\u793a\u65b9\u6cd5\u53ef\u80fd\u4f1a\u629b\u51fa\u4f8b\u5916 D. \u65b9\u6cd5\u7684\u6807\u5fd7\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5fc5\u987b\u6709 \u89e3\u51b3\u65b9\u6848 C","title":"7 \u4f8b\u5916\u5904\u7406"},{"location":"uooc/java/7/#71","text":"","title":"7.1 \u5904\u7406\u5f02\u5e38"},{"location":"uooc/java/7/#_1","text":"A. \u6355\u83b7\u5f02\u5e38 B. \u629b\u51fa\u5f02\u5e38 C. \u58f0\u660e\u5f02\u5e38 D. \u5d4c\u5957\u5f02\u5e38","title":"\u5f53\u65b9\u6cd5\u9047\u5230\u5f02\u5e38\u53c8\u4e0d\u77e5\u5982\u4f55\u5904\u7406\u65f6\uff0c\u4e0b\u5217\u54ea\u79cd\u8bf4\u6cd5\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/7/#_2","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_3","text":"A. java.io.Exception B. java.lang.Throwable C. java.lang.Exception D. java.lang.Error","title":"\u8bf7\u95ee\u6240\u6709\u7684\u5f02\u5e38\u7c7b\u7686\u7ee7\u627f\u54ea\u4e00\u4e2a\u7c7b\uff1f"},{"location":"uooc/java/7/#_4","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_5","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5f02\u5e38\u662f\u7a0b\u5e8f\u9519\u8bef\u6216\u53ef\u80fd\u5bfc\u81f4\u7a0b\u5e8f\u9519\u8bef\u7684\u4e0d\u6b63\u5e38\u72b6\u6001\u3002"},{"location":"uooc/java/7/#_6","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_7","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5f53\u4e00\u4e2a\u65b9\u6cd5\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u4e00\u4e2a\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u4f1a\u7ec8\u6b62\uff0c\u4f46\u662f\u6574\u4e2a\u7a0b\u5e8f\u4e0d\u4e00\u5b9a\u7ec8\u6b62\u8fd0\u884c\u3002"},{"location":"uooc/java/7/#_8","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#72","text":"","title":"7.2 \u4f8b\u5916\u5904\u7406\u673a\u5236"},{"location":"uooc/java/7/#javaerror-cannot-read-aaajava","text":"A. \u539f\u56e0\u662f\u6267\u884c\u7684\u5f53\u524d\u76ee\u5f55\u4e0b\u6ca1\u6709\u627e\u5230aaa.java\u6587\u4ef6 B. \u539f\u56e0\u662f\u6ca1\u6709\u5b89\u88c5JDK\u5f00\u53d1\u73af\u5883\u3002 C. \u539f\u56e0\u662fjava\u6e90\u6587\u4ef6\u540d\u540e\u7f00\u4e00\u5b9a\u662f\u4ee5 .txt \u7ed3\u5c3e\u3002 D. \u539f\u56e0\u662fJDK\u5b89\u88c5\u540e\u6ca1\u6709\u6b63\u786e\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfPATH\u548cClasspath \u3002","title":"\u7f16\u8bd1java\u7a0b\u5e8f\u65f6\u51fa\u73b0error: cannot read: aaa.java\uff0c\u5219\u4e0b\u5217\u539f\u56e0\u6700\u6b63\u786e\u7684\u662f\uff1f"},{"location":"uooc/java/7/#_9","text":"A","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_10","text":"A. ClassNotFoundException B. IOException C. InterruptedException D. UnknownHostException","title":"\u4e0b\u5217\u5e38\u89c1\u7684\u7cfb\u7edf\u5b9a\u4e49\u7684\u5f02\u5e38\u4e2d\uff0c\u54ea\u4e00\u4e2a\u662f\u8f93\u5165\u3001\u8f93\u51fa\u5f02\u5e38\uff1f"},{"location":"uooc/java/7/#_11","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#_12","text":"A. transient B. finally C. throw D. static","title":"\u54ea\u4e2a\u5173\u952e\u5b57\u53ef\u4ee5\u629b\u51fa\u5f02\u5e38\uff1f"},{"location":"uooc/java/7/#_13","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#catch","text":"A. \u7236\u7c7b\u5728\u5148\uff0c\u5b50\u7c7b\u5728\u540e B. \u5b50\u7c7b\u5728\u5148\uff0c\u7236\u7c7b\u5728\u540e C. \u6709\u7ee7\u627f\u5173\u7cfb\u7684\u5f02\u5e38\u4e0d\u80fd\u5728\u540c\u4e00\u4e2atry\u7a0b\u5e8f\u6bb5\u5185 D. \u5148\u6709\u5b50\u7c7b\uff0c\u5176\u4ed6\u5982\u4f55\u6392\u5217\u90fd\u65e0\u5173","title":"\u4f8b\u5916\u5904\u7406\u8fc7\u7a0b\u4e2d\u5bf9\u4e8ecatch\u5b50\u53e5\u7684\u6392\u5217\uff0c\u4e0b\u5217\u54ea\u79cd\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/7/#_14","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/7/#throws","text":"A. \u6ca1\u6709\u610f\u4e49 B. \u8868\u793a\u540e\u9762\u662f\u65b9\u6cd5\u7684\u8f93\u51fa\u503c C. \u8868\u793a\u65b9\u6cd5\u53ef\u80fd\u4f1a\u629b\u51fa\u4f8b\u5916 D. \u65b9\u6cd5\u7684\u6807\u5fd7\uff0c\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u5fc5\u987b\u6709","title":"throws\u7684\u4f5c\u7528\u662f\uff1a"},{"location":"uooc/java/7/#_15","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/","text":"8.1File\u7c7b \u53ef\u4ee5\u4f7f\u7528File\u7c7b\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 8.2 \u8f93\u5165\u8f93\u51fa\u6d41 \u4e0b\u5217InputStream\u7c7b\u4e2d _ \u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5173\u95ed\u6d41\uff1f A. skip() B. reset() C. close() D. mark() \u89e3\u51b3\u65b9\u6848 C \u4f7f\u7528FileInputStream\u7c7b\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u6309\u5b57\u7b26\u8bfb\u5165\u6570\u636e\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B","title":"8 File\u7c7b\u4e0e\u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"uooc/java/8/#81file","text":"","title":"8.1File\u7c7b"},{"location":"uooc/java/8/#file","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u53ef\u4ee5\u4f7f\u7528File\u7c7b\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\u91cc\u7684\u5185\u5bb9\u3002"},{"location":"uooc/java/8/#_1","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/#82","text":"","title":"8.2 \u8f93\u5165\u8f93\u51fa\u6d41"},{"location":"uooc/java/8/#inputstream_","text":"A. skip() B. reset() C. close() D. mark()","title":"\u4e0b\u5217InputStream\u7c7b\u4e2d_\u65b9\u6cd5\u53ef\u4ee5\u7528\u4e8e\u5173\u95ed\u6d41\uff1f"},{"location":"uooc/java/8/#_2","text":"C","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/8/#fileinputstream","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4f7f\u7528FileInputStream\u7c7b\uff0c\u53ef\u4ee5\u4ece\u6587\u4ef6\u4e2d\u6309\u5b57\u7b26\u8bfb\u5165\u6570\u636e\u3002"},{"location":"uooc/java/8/#_3","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/","text":"9.2 \u7a97\u4f53 \u4f7f\u7528Swing\u7f16\u7a0b\u65f6\uff0c\u5982\u679c\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u9700\u8981\u4f7f\u7528\u54ea\u51e0\u79cd\u7ebf\u7a0b\uff1a A. \u521d\u59cb\u5316\u7ebf\u7a0b B. \u4e8b\u4ef6\u8c03\u5ea6\u7ebf\u7a0b C. \u5de5\u4f5c\u7ebf\u7a0b \u89e3\u51b3\u65b9\u6848 ABC 9.3 \u83dc\u5355 \u5feb\u6377\u952e\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u5feb\u6377\u952e\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B \u52a9\u8bb0\u7b26\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u52a9\u8bb0\u7b26\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.4 \u5e03\u5c40\u7ba1\u7406 \u4e3a\u4e86\u5b9e\u73b0\u590d\u6742\u7684\u754c\u9762\u5e03\u5c40\uff0cJFrame\u7684\u5185\u5bb9\u533a\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2aLayout\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.5 \u5e38\u7528\u7ec4\u4ef6 \u5bc6\u7801\u6846\u7c7bJPasswordField\u662f\u6587\u672c\u6846\u7c7bJTextField\u7684\u5b50\u7c7b\u3002\u6587\u672c\u6846\u7528JTextField.getText()\u83b7\u53d6\u6587\u672c\u5185\u5bb9\uff0c\u5bc6\u7801\u6846\u53ef\u4ee5\u4f7f\u7528JPasswordField.getText()\u83b7\u53d6\u5bc6\u7801\u6587\u672c\u3002 A. \u6b63\u786e B. \u9519\u8bef \u89e3\u51b3\u65b9\u6848 B 9.6 \u5e38\u7528\u5bf9\u8bdd\u6846 String s = JOptionPane . showInputDialog ( frame , \"\u8bf7\u8f93\u5165\u60a8\u6240\u5728\u57ce\u5e02\u540d\u79f0\uff1a\" ); \u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u540e\uff0c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u8f93\u5165\u5bf9\u8bdd\u6846\uff0c\u5982\u679c\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u53f3\u4e0a\u89d2\u4e0a\u7684\u201cX\u201d\u56fe\u6807\uff08\u5173\u95ed\u6309\u94ae\uff09\uff0c\u90a3\u4e48\u8fd4\u56de\u503cs\u662f\uff1a A. \"\" B. null C. NULL D. false \u89e3\u51b3\u65b9\u6848 B 9.7 \u4e8b\u4ef6\u5904\u7406 \u4e0b\u9762\u54ea\u4e9b\u662f\u6b63\u786e\u7684\uff1f A. MouseAdapter\u662f\u4e00\u4e2a\u7c7b B. MouseAdapter\u662f\u4e00\u4e2a\u63a5\u53e3 C. MouseListener\u662f\u4e00\u4e2a\u7c7b D. MouseListener\u662f\u4e00\u4e2a\u63a5\u53e3 \u89e3\u51b3\u65b9\u6848 AD","title":"9 \u56fe\u5f62\u7528\u6237\u754c\u9762\u8bbe\u8ba1"},{"location":"uooc/java/9/#92","text":"","title":"9.2 \u7a97\u4f53"},{"location":"uooc/java/9/#swing","text":"A. \u521d\u59cb\u5316\u7ebf\u7a0b B. \u4e8b\u4ef6\u8c03\u5ea6\u7ebf\u7a0b C. \u5de5\u4f5c\u7ebf\u7a0b","title":"\u4f7f\u7528Swing\u7f16\u7a0b\u65f6\uff0c\u5982\u679c\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u9700\u8981\u4f7f\u7528\u54ea\u51e0\u79cd\u7ebf\u7a0b\uff1a"},{"location":"uooc/java/9/#_1","text":"ABC","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#93","text":"","title":"9.3 \u83dc\u5355"},{"location":"uooc/java/9/#_2","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5feb\u6377\u952e\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u5feb\u6377\u952e\u3002"},{"location":"uooc/java/9/#_3","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#_4","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u52a9\u8bb0\u7b26\u662f\u4e3a\u4e86\u63d0\u5347\u6548\u7387\u800c\u8bbe\uff0c\u83dc\u5355\u9879\u4e00\u5b9a\u8981\u8bbe\u7f6e\u52a9\u8bb0\u7b26\u3002"},{"location":"uooc/java/9/#_5","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#94","text":"","title":"9.4 \u5e03\u5c40\u7ba1\u7406"},{"location":"uooc/java/9/#jframelayout","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u4e3a\u4e86\u5b9e\u73b0\u590d\u6742\u7684\u754c\u9762\u5e03\u5c40\uff0cJFrame\u7684\u5185\u5bb9\u533a\u53ef\u4ee5\u8bbe\u7f6e\u591a\u4e2aLayout\u3002"},{"location":"uooc/java/9/#_6","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#95","text":"","title":"9.5 \u5e38\u7528\u7ec4\u4ef6"},{"location":"uooc/java/9/#jpasswordfieldjtextfieldjtextfieldgettextjpasswordfieldgettext","text":"A. \u6b63\u786e B. \u9519\u8bef","title":"\u5bc6\u7801\u6846\u7c7bJPasswordField\u662f\u6587\u672c\u6846\u7c7bJTextField\u7684\u5b50\u7c7b\u3002\u6587\u672c\u6846\u7528JTextField.getText()\u83b7\u53d6\u6587\u672c\u5185\u5bb9\uff0c\u5bc6\u7801\u6846\u53ef\u4ee5\u4f7f\u7528JPasswordField.getText()\u83b7\u53d6\u5bc6\u7801\u6587\u672c\u3002"},{"location":"uooc/java/9/#_7","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#96","text":"String s = JOptionPane . showInputDialog ( frame , \"\u8bf7\u8f93\u5165\u60a8\u6240\u5728\u57ce\u5e02\u540d\u79f0\uff1a\" );","title":"9.6 \u5e38\u7528\u5bf9\u8bdd\u6846"},{"location":"uooc/java/9/#xs","text":"A. \"\" B. null C. NULL D. false","title":"\u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u540e\uff0c\u4f1a\u5f39\u51fa\u4e00\u4e2a\u8f93\u5165\u5bf9\u8bdd\u6846\uff0c\u5982\u679c\u7528\u6237\u70b9\u51fb\u5bf9\u8bdd\u6846\u53f3\u4e0a\u89d2\u4e0a\u7684\u201cX\u201d\u56fe\u6807\uff08\u5173\u95ed\u6309\u94ae\uff09\uff0c\u90a3\u4e48\u8fd4\u56de\u503cs\u662f\uff1a"},{"location":"uooc/java/9/#_8","text":"B","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"uooc/java/9/#97","text":"","title":"9.7 \u4e8b\u4ef6\u5904\u7406"},{"location":"uooc/java/9/#_9","text":"A. MouseAdapter\u662f\u4e00\u4e2a\u7c7b B. MouseAdapter\u662f\u4e00\u4e2a\u63a5\u53e3 C. MouseListener\u662f\u4e00\u4e2a\u7c7b D. MouseListener\u662f\u4e00\u4e2a\u63a5\u53e3","title":"\u4e0b\u9762\u54ea\u4e9b\u662f\u6b63\u786e\u7684\uff1f"},{"location":"uooc/java/9/#_10","text":"AD","title":"\u89e3\u51b3\u65b9\u6848"}]}